{"version":3,"sources":["components/Header.tsx","components/Sidebar.tsx","components/Footer.tsx","components/home/HomeContent.tsx","common/color.ts","components/menus/ModalMenu.tsx","components/menus/ColorMenu.tsx","components/menus/ConfirmDeleteMenu.tsx","components/quicknotes/Quicknote.tsx","components/quicknotes/QNHelp.tsx","components/Searchbar.tsx","components/quicknotes/QuicknotesContent.tsx","components/marknotes/Marknote.tsx","components/marknotes/MNHelp.tsx","components/marknotes/Editor.tsx","components/marknotes/MarknotesContent.tsx","components/settings/SettingsContent.tsx","App.tsx","index.tsx"],"names":["ipc","ipcRenderer","window","require","e","Restore","className","Maximize","Header","useState","windowMaximized","setWindowMaximized","windowIcon","setWindowIcon","window_button","document","getElementById","useEffect","title","id","onClick","send","Sidebar","useLocation","pathname","selectedTab","setSelectedTab","tabs","selected","classList","add","filter","tab","temp","remove","to","Footer","href","HomeContent","Fragment","COLOR","ModalMenu","heading","children","showMenuState","setShowMenuState","menuRef","useRef","keyPress","useCallback","event","key","addEventListener","removeEventListener","ref","current","target","closeMenu","prev","ColorMenu","showColorMenu","setShowColorMenu","handleEditColor","handleOnClick","dataset","color","ConfirmDelete","currentNote","handleDeleteNote","toggleConfirmDelete","trim","length","redirect","type","undefined","Quicknote","handleDeleteQuicknote","handleUpdateQuicknote","body_limit","body","handleEditField","value","Date","now","showConfirmDelete","setShowConfirmDelete","style","backgroundColor","placeholder","onChange","size","lastModified","toLocaleDateString","QNHelp","showQNHelp","setShowQNHelp","Searchbar","handleSearchNote","QuicknotesContent","quicknotes","setQuicknotes","local","savedQuicknotes","JSON","parse","localStorage","getItem","setItem","stringify","newQuicknotes","note","currentQuicknote","updatedQuicknote","updatedQuicknotesArray","map","QNSearchText","setQNSearchText","notes_list","toLowerCase","includes","favorited","notes","newQuicknote","nanoid","Marknote","handleUpdateMarknote","handleDeleteMarknote","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","substr","hour","minute","MNHelp","showMNHelp","setShowMNHelp","Subheader","styled","section","css","TitleInput","input","SubheaderButton","li","color2","Editor","color_light","setRedirect","MarknotesContent","history","marknotes","setMarknotes","savedMarknotes","noteId","currentMarknote","updatedMarknote","updatedMarknotesArray","sortedMarknotes","sort","a","b","MNSearchText","setMNSearchText","exact","path","newMarknote","SettingsContent","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.08156027.chunk.js","sourcesContent":["/* Header and Titlebar Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// Component imports\r\n\r\n// Image and icon imports\r\nimport { BiWindow, BiWindows } from \"react-icons/bi\";\r\nimport { FaRegWindowMinimize } from \"react-icons/fa\";\r\nimport { TiPower } from \"react-icons/ti\";\r\n\r\n// Import electron renderer\r\nlet ipc: any;\r\ntry {\r\n  const { ipcRenderer } = window.require(\"electron\");\r\n  ipc = ipcRenderer;\r\n} catch (e) {\r\n  // Do nothing\r\n}\r\n\r\n// Icon Components for Maximize/Restore button\r\nconst Restore = () => {\r\n  return <BiWindows className=\"window-icon\" />;\r\n};\r\n\r\nconst Maximize = () => {\r\n  return <BiWindow className=\"window-icon\" />;\r\n};\r\n\r\n// interface HeaderProps {}\r\n\r\nconst Header = () => {\r\n  // State to check if window is maximized\r\n  const [windowMaximized, setWindowMaximized] = useState(false);\r\n  const [windowIcon, setWindowIcon] = useState(<Maximize />);\r\n  const window_button = document.getElementById(\"window-button\");\r\n\r\n  // Button handlers\r\n  const handleOnClickClose = () => {\r\n    ipc.send(\"closeApp\");\r\n  };\r\n\r\n  const handleOnClickMinimize = () => {\r\n    ipc.send(\"minimizeApp\");\r\n  };\r\n\r\n  const handleOnClickMaximizeRestore = () => {\r\n    ipc.send(\"maximizeRestoreApp\");\r\n    setWindowMaximized(windowMaximized ? false : true);\r\n  };\r\n\r\n  // Effect hook to switch between maximize icon and restore icon\r\n  useEffect(() => {\r\n    setWindowIcon(windowMaximized ? <Restore /> : <Maximize />);\r\n    if (window_button !== null)\r\n      window_button.title = windowMaximized ? \"Restore Down\" : \"Maximize\";\r\n  }, [windowMaximized, window_button]);\r\n\r\n  return (\r\n    <header>\r\n      <div id=\"header-left\">\r\n        <div id=\"app-title\">Denote!</div>\r\n      </div>\r\n      <div id=\"header-drag\"></div>\r\n      <div id=\"title-bar-buttons\">\r\n        <ul>\r\n          <li onClick={handleOnClickMinimize} title=\"Minimize\">\r\n            <FaRegWindowMinimize id=\"minimize-icon\" />\r\n          </li>\r\n          <li id=\"window-button\" onClick={handleOnClickMaximizeRestore}>\r\n            {windowIcon}\r\n          </li>\r\n          <li onClick={handleOnClickClose} id=\"close-app-button\" title=\"Close\">\r\n            <TiPower id=\"power-icon\" />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\n// Image and icon imports\r\nimport { BiNote, BiNotepad } from \"react-icons/bi\";\r\nimport { FiSettings } from \"react-icons/fi\";\r\nimport { TiHomeOutline } from \"react-icons/ti\";\r\n\r\nexport interface SidebarProps {}\r\n\r\nconst Sidebar = () => {\r\n  const [selectedTab, setSelectedTab] = useState(useLocation().pathname);\r\n\r\n  const tabs = [\"/\", \"/quicknotes\", \"/marknotes\", \"/settings\"];\r\n\r\n  useEffect(() => {\r\n    let selected = document.getElementById(selectedTab);\r\n    if (selected !== null) selected.classList.add(\"selected\");\r\n    for (const tab of tabs.filter((tab) => tab !== selectedTab)) {\r\n      let temp = document.getElementById(tab);\r\n      if (temp !== null) temp.classList.remove(\"selected\");\r\n    }\r\n  });\r\n\r\n  return (\r\n    <section id=\"sidebar\">\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link\r\n              to=\"/\"\r\n              onClick={() => setSelectedTab(\"/\")}\r\n              title=\"Home\"\r\n            >\r\n              <div id=\"/\" className=\"nav-button\" />\r\n              <TiHomeOutline className=\"nav-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/quicknotes\"\r\n              onClick={() => setSelectedTab(\"/quicknotes\")}\r\n              title=\"Quicknotes\"\r\n            >\r\n              <div id=\"/quicknotes\" className=\"nav-button\" />\r\n              <BiNote className=\"nav-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/marknotes\"\r\n              onClick={() => setSelectedTab(\"/marknotes\")}\r\n              title=\"Marknotes\"\r\n            >\r\n              <div id=\"/marknotes\" className=\"nav-button\" />\r\n              <BiNotepad className=\"nav-icon\" />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link\r\n              to=\"/settings\"\r\n              onClick={() => setSelectedTab(\"/settings\")}\r\n              title=\"Settings\"\r\n            >\r\n              <div id=\"/settings\" className=\"nav-button\" />\r\n              <FiSettings className=\"nav-icon settings-icon\" />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\n// Image and icon imports\r\nimport { VscGithub } from \"react-icons/vsc\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div id=\"github-link\"><VscGithub /><a href=\"https://github.com/fborja44/denote\">Github Repo</a></div>\r\n      <div id=\"cpy\">Francis Borja © 2021</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","/* Home Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\nexport interface HomeContentProps {}\r\n\r\nconst HomeContent = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"sub-header\">\r\n        <h1>Home</h1>\r\n      </section>\r\n      <div className=\"main-content-wrapper\">\r\n        <div>Home</div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default HomeContent;\r\n","const COLOR = {\r\n  BLACK: \"black\",\r\n  BLACK_HOVER: \"#151515\",\r\n  WHITE: \"white\",\r\n  WHITE_HOVER: \"#ededed\",\r\n  GREY: \"#b4b4b4\",\r\n  GREY_DARK: \"#828282\",\r\n  RED: \"#eb5757\",\r\n  RED_DARK: \"#cf4242\",\r\n  ORANGE: \"#f2994a\",\r\n  ORANGE_DARK: \"#e98034\",\r\n  YELLOW: \"#f2c94c\",\r\n  YELLOW_DARK: \"#edac2f\",\r\n  GREEN: \"#27ae60\",\r\n  GREEN_DARK: \"#2b9843\",\r\n  BLUE: \"#2f80ed\",\r\n  BLUE_DARK: \"#2c62cd\",\r\n  PURPLE: \"#bb6bd9\",\r\n  PURPLE_DARK: \"#964cc3\",\r\n  PINK: \"#f035a5\",\r\n  CYAN: \"#31C6DA\",\r\n  LEMON: \"#FAFF00\",\r\n  LIME: \"#58D744\",\r\n\r\n  /* Light versions */\r\n  GREY_LIGHT: \"#D2D2D2\",\r\n  GREY_DARK_LIGHT: \"#9F9F9F\",\r\n  RED_LIGHT: \"#F66F6F\",\r\n  ORANGE_LIGHT: \"#FFAE66\",\r\n  YELLOW_LIGHT: \"#FFD965\",\r\n  GREEN_LIGHT: \"#46CB7E\",\r\n  BLUE_LIGHT: \"#4C98FE\",\r\n  PURPLE_LIGHT: \"#D78CF3\",\r\n  PINK_LIGHT: \"#FC62BE\",\r\n  CYAN_LIGHT: \"#6DE4F4\",\r\n  LIME_LIGHT: \"#8EF17E\",\r\n  LEMON_LIGHT: \"#FDFF96\",\r\n};\r\n\r\nexport { COLOR };\r\n","/* Reusable Modal Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useRef, useEffect, useCallback } from \"react\";\r\n\r\n// Image and icon imports\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\nexport interface ModalMenuProps {\r\n  heading: string;\r\n  children: any;\r\n  showMenuState: any;\r\n  setShowMenuState: any;\r\n}\r\n\r\nconst ModalMenu = ({\r\n  heading,\r\n  children,\r\n  showMenuState,\r\n  setShowMenuState,\r\n}: ModalMenuProps) => {\r\n  const menuRef: any = useRef();\r\n\r\n  /**\r\n   * Closes the menu\r\n   * TODO: Update event and setShowMenuState type\r\n   */\r\n  const closeMenu = (event: any, setShowMenuState: any) => {\r\n    if (menuRef.current === event.target) {\r\n      setShowMenuState(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Closes menu on ESC keypress\r\n   */\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === \"Escape\" && showMenuState) {\r\n        setShowMenuState(false);\r\n      }\r\n    },\r\n    [showMenuState, setShowMenuState]\r\n  );\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", keyPress);\r\n    return () => document.removeEventListener(\"keydown\", keyPress);\r\n  }, [keyPress]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/** Ternary Operator decides whether to show the menu or not */}\r\n      {showMenuState ? (\r\n        <div\r\n          ref={menuRef}\r\n          onClick={(event) => closeMenu(event, setShowMenuState)}\r\n          className=\"modal-menu-background\"\r\n        >\r\n          <section className=\"modal-menu-wrapper\">\r\n            <div className=\"modal-menu-header\">\r\n              <h1 className=\"modal-menu-title\">{heading}</h1>\r\n              <MdClose\r\n                className=\"modal-menu-close-button\"\r\n                aria-label=\"Close Menu\"\r\n                onClick={() => setShowMenuState((prev: any) => !prev)}\r\n              />\r\n            </div>\r\n            <div className=\"modal-menu-content-container\">{children}</div>\r\n          </section>\r\n        </div>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ModalMenu;\r\n","/* Color Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n\r\n// Common imports\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport ModalMenu from \"./ModalMenu\";\r\n\r\n// Image and icon imports\r\n\r\nexport interface ColorMenuProps {\r\n  showColorMenu: any;\r\n  setShowColorMenu: any;\r\n  handleEditColor: any;\r\n}\r\n\r\nconst ColorMenu = ({\r\n  showColorMenu,\r\n  setShowColorMenu,\r\n  handleEditColor,\r\n}: ColorMenuProps) => {\r\n  /**\r\n   * On click handler to change color of note\r\n   * TODO: Update event type\r\n   */\r\n  const handleOnClick = (event: any) => {\r\n    handleEditColor(event.target.dataset.color);\r\n    setShowColorMenu(false);\r\n  };\r\n\r\n  return (\r\n    <ModalMenu\r\n      heading=\"Choose Note Color\"\r\n      showMenuState={showColorMenu}\r\n      setShowMenuState={setShowColorMenu}\r\n    >\r\n      <div className=\"color-menu-content\">\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.RED}\r\n          className=\"color-option red\"\r\n          title=\"Red\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.ORANGE}\r\n          className=\"color-option orange\"\r\n          title=\"Orange\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.YELLOW}\r\n          className=\"color-option yellow\"\r\n          title=\"Yellow\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.GREEN}\r\n          className=\"color-option green\"\r\n          title=\"Green\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.BLUE}\r\n          className=\"color-option blue\"\r\n          title=\"Blue\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.PURPLE}\r\n          className=\"color-option purple\"\r\n          title=\"Purple\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.PINK}\r\n          className=\"color-option pink\"\r\n          title=\"Pink\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.CYAN}\r\n          className=\"color-option cyan\"\r\n          title=\"Cyan\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.LEMON}\r\n          className=\"color-option lemon\"\r\n          title=\"Lemon\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.LIME}\r\n          className=\"color-option lime\"\r\n          title=\"Lime\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.GREY}\r\n          className=\"color-option grey\"\r\n          title=\"Grey\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.GREY_DARK}\r\n          className=\"color-option grey-dark\"\r\n          title=\"Dark Grey\"\r\n        />\r\n      </div>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default ColorMenu;\r\n","/* Searchbar Component\r\n------------------------------------------------------------------------------*/\r\n// React import\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport ModalMenu from \"./ModalMenu\";\r\nimport { MarknoteProps } from \"../marknotes/Marknote\";\r\nimport { QuicknoteProps } from \"../quicknotes/Quicknote\";\r\n\r\nexport interface ConfirmDeleteProps {\r\n  currentNote: MarknoteProps | QuicknoteProps,\r\n  showMenuState: any;\r\n  setShowMenuState: any;\r\n  handleDeleteNote?: (id: string) => void;\r\n  toggleConfirmDelete: (event: any) => void;\r\n}\r\n\r\nconst ConfirmDelete = ({\r\n  currentNote,\r\n  showMenuState,\r\n  setShowMenuState,\r\n  handleDeleteNote,\r\n  toggleConfirmDelete,\r\n}: ConfirmDeleteProps) => {\r\n  // Check if note title is empty\r\n  const title = currentNote.title.trim().length === 0 ? \"Untitled Note\" : currentNote.title;\r\n\r\n  // Check note type to determine redirect\r\n  const redirect = currentNote.type === \"marknote\" ? \"marknotes\" : \"quicknotes\";\r\n\r\n  return (\r\n    <ModalMenu\r\n      heading={`Delete \"${title}\"?`}\r\n      showMenuState={showMenuState}\r\n      setShowMenuState={setShowMenuState}\r\n    >\r\n      <div className=\"delete-menu-text\">\r\n        <p>This action cannot be reversed.</p>\r\n        <Link to={`/${redirect}`}\r\n          className=\"delete-menu-button\"\r\n          onClick={\r\n            handleDeleteNote\r\n              ? (event) => {\r\n                  handleDeleteNote(currentNote.id);\r\n                  toggleConfirmDelete(event);\r\n                }\r\n              : undefined\r\n          }\r\n        >\r\n          Confirm\r\n        </Link>\r\n      </div>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","// React imports\r\nimport React, { useState } from \"react\";\r\n\r\n// Component imports\r\nimport ColorMenu from \"../menus/ColorMenu\";\r\nimport ConfirmDelete from \"../menus/ConfirmDeleteMenu\";\r\n\r\n// Image and icon imports\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport { IoMdMenu } from \"react-icons/io\";\r\n\r\nexport interface QuicknoteProps {\r\n  // Props to store quicknote data\r\n  type: string;\r\n  id: string;\r\n  title: string;\r\n  color: string;\r\n  body: string;\r\n  lastModified: number;\r\n  favorited: boolean;\r\n\r\n  // Props for children of QuicknotesContent\r\n  notes?: QuicknoteProps[];\r\n  currentNote?: any;\r\n  handleDeleteQuicknote?: (id: string) => void;\r\n  handleUpdateQuicknote?: any;\r\n}\r\n\r\nconst Quicknote = ({\r\n  currentNote,\r\n  handleDeleteQuicknote,\r\n  handleUpdateQuicknote,\r\n}: QuicknoteProps) => {\r\n  // Character limits\r\n  const titleCharLimit = 30;\r\n  const bodyCharLimit = 300;\r\n  let body_limit = bodyCharLimit;\r\n\r\n  if (currentNote.body) {\r\n    body_limit -= currentNote.body.length;\r\n  }\r\n\r\n  /**\r\n   * Function to handle changes in a note's field.\r\n   * @param key The field being changed\r\n   * @param value The new value of the field\r\n   */\r\n  const handleEditField = (key: string, value: string) => {\r\n    // Check character limit\r\n    if (\r\n      (key === \"title\" && titleCharLimit - value.length >= 0) ||\r\n      (key === \"body\" && bodyCharLimit - value.length >= 0)\r\n    ) {\r\n      handleUpdateQuicknote(currentNote, {\r\n        ...currentNote,\r\n        [key]: value,\r\n        lastModified: Date.now(),\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to handle a change in the note's color.\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleEditColor = (color: any) => {\r\n    handleUpdateQuicknote(currentNote, {\r\n      ...currentNote,\r\n      color: color,\r\n    });\r\n  };\r\n\r\n  // Menu state\r\n  const [showColorMenu, setShowColorMenu] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the color menu\r\n   */\r\n  const toggleColorMenu = () => {\r\n    setShowColorMenu((prev) => !prev); // Toggle off and on\r\n  };\r\n\r\n  // Quicknote Delete Menu state\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the confirm delete menu\r\n   */\r\n  const toggleConfirmDelete = () => {\r\n    setShowConfirmDelete((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"quicknote\">\r\n      <div\r\n        className=\"quicknote-header\"\r\n        style={{ backgroundColor: currentNote.color }}\r\n      >\r\n        <input\r\n          className=\"quicknote-title\"\r\n          value={currentNote.title}\r\n          placeholder=\"Enter a title...\"\r\n          onChange={(event) => handleEditField(\"title\", event.target.value)}\r\n        />\r\n        <button\r\n          title=\"Options\"\r\n          onClick={toggleColorMenu}\r\n          className=\"color-menu-button\"\r\n        >\r\n          <IoMdMenu />\r\n        </button>\r\n        <button\r\n          title=\"Delete\"\r\n          className=\"delete-note-button\"\r\n          onClick={toggleConfirmDelete}\r\n        >\r\n          <TiDelete className=\"delete-icon\" size=\"1.2em\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"quicknote-content\">\r\n        <textarea\r\n          className=\"quicknote-body\"\r\n          placeholder=\"Write your note here...\"\r\n          value={currentNote.body}\r\n          onChange={(event) => handleEditField(\"body\", event.target.value)}\r\n        />\r\n        <div className=\"quicknote-footer\">\r\n          <small>\r\n            {new Date(currentNote.lastModified).toLocaleDateString()}\r\n          </small>\r\n          <div className=\"quicknote-footer-left\">\r\n            <small>\r\n              {body_limit}/{bodyCharLimit}\r\n            </small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ColorMenu\r\n        showColorMenu={showColorMenu}\r\n        setShowColorMenu={setShowColorMenu}\r\n        handleEditColor={handleEditColor}\r\n      />\r\n      <ConfirmDelete\r\n        currentNote={currentNote}\r\n        showMenuState={showConfirmDelete}\r\n        setShowMenuState={setShowConfirmDelete}\r\n        handleDeleteNote={handleDeleteQuicknote}\r\n        toggleConfirmDelete={toggleConfirmDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quicknote;\r\n","/* Marknotes Help Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n\r\n// Component imports\r\nimport ModalMenu from \"../menus/ModalMenu\";\r\n\r\nexport interface QNHelpProps {\r\n  showQNHelp: any;\r\n  setShowQNHelp: any;\r\n}\r\n\r\nconst QNHelp = ({ showQNHelp, setShowQNHelp }: QNHelpProps) => {\r\n  return (\r\n    <ModalMenu\r\n      heading=\"Quicknotes Help\"\r\n      showMenuState={showQNHelp}\r\n      setShowMenuState={setShowQNHelp}\r\n    >\r\n      <p>\r\n        Quicknotes are small and quick notes similar to sticky notes for jotting\r\n        down quick thoughts, notes, or ideas.\r\n      </p>\r\n      <p>\r\n        To add a new note, enter some text in the new note field and click the +\r\n        button in the bottom right.\r\n      </p>\r\n      <p>\r\n        To change the label color of a quicknote, click the edit button at the\r\n        top right of the note.\r\n      </p>\r\n      <p>\r\n        To delete a note, click the delete button at the top right of the\r\n        notes. Deletions are permanent.\r\n      </p>\r\n      <p>\r\n        All notes are automatically saved when they are edited, created, or\r\n        deleted.\r\n      </p>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default QNHelp;\r\n","/* Searchbar Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n// Image and icon imports\r\nimport { FaSearch } from \"react-icons/fa\";\r\n\r\ninterface SearchbarProps {\r\n  handleSearchNote: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst Searchbar = ({ handleSearchNote }: SearchbarProps) => {\r\n  return (\r\n    <div className=\"searchbar\">\r\n      <FaSearch className=\"search-icon\" size=\"1.3em\" />\r\n      <input\r\n        onChange={(event) => handleSearchNote(event.target.value)}\r\n        placeholder=\"type to search...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","/* Quicknotes Main Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Common imports\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport Quicknote, { QuicknoteProps } from \"./Quicknote\";\r\nimport QNHelp from \"./QNHelp\";\r\nimport Searchbar from \"../Searchbar\";\r\n\r\n// Image and icon imports\r\nimport { RiAddLine } from \"react-icons/ri\";\r\nimport { MdHelpOutline } from \"react-icons/md\";\r\n\r\nexport interface QuicknotesContentProps {}\r\n\r\n/**\r\n * Content for the quicknotes route.\r\n */\r\nconst QuicknotesContent = () => {\r\n  const [quicknotes, setQuicknotes] = useState<QuicknoteProps[]>([]);\r\n  const local = \"denote_quicknotes\";\r\n\r\n  /**\r\n   * Effect hook to retrieve quicknotes from local storage\r\n   */\r\n  useEffect(() => {\r\n    const savedQuicknotes = JSON.parse(localStorage.getItem(local) || \"{}\");\r\n    // Check if notes were received\r\n    if (savedQuicknotes) {\r\n      setQuicknotes(savedQuicknotes);\r\n    }\r\n  }, []); // Run on load\r\n\r\n  /**\r\n   * Effect hook to save quicknotes to local storage when change is made\r\n   */\r\n  useEffect(() => {\r\n    localStorage.setItem(local, JSON.stringify(quicknotes));\r\n  }, [quicknotes]); // Run on change in notes\r\n\r\n  const handleDeleteQuicknote = (id: string) => {\r\n    const newQuicknotes = quicknotes.filter(\r\n      (note: QuicknoteProps) => note.id !== id\r\n    ); // don't need to make new array since filter returns new array\r\n    setQuicknotes(newQuicknotes);\r\n  };\r\n\r\n  // Quicknotes Help Menu state\r\n  const [showQNHelp, setShowQNHelp] = useState(false);\r\n\r\n  const openQNHelp = () => {\r\n    setShowQNHelp((prev) => !prev);\r\n  };\r\n\r\n  /**\r\n   * Function to add new empty quicknote after add quicknote button is pressed\r\n   */\r\n  const handleAddQuicknote = () => {\r\n    const newQuicknote = {\r\n      type: \"quicknote\",\r\n      id: nanoid(),\r\n      title: \"\",\r\n      color: COLOR.GREY_DARK,\r\n      body: \"\",\r\n      lastModified: Date.now(),\r\n      favorited: false,\r\n    };\r\n\r\n    setQuicknotes([...quicknotes, newQuicknote]);\r\n  };\r\n\r\n  /**\r\n   * Function to update a quicknote in the list with updated information\r\n   * @param currentQuicknote The quicknote being updated\r\n   * @param updatedQuicknote The new information in update with\r\n   */\r\n  const handleUpdateQuicknote = (\r\n    currentQuicknote: QuicknoteProps,\r\n    updatedQuicknote: any\r\n  ) => {\r\n    const updatedQuicknotesArray = quicknotes.map((note: any) => {\r\n      if (note.id === currentQuicknote.id) {\r\n        return updatedQuicknote;\r\n      }\r\n      return note;\r\n    });\r\n    setQuicknotes(updatedQuicknotesArray);\r\n  };\r\n\r\n  /**\r\n   * State for quicknotes search text\r\n   */\r\n  const [QNSearchText, setQNSearchText] = useState(\"\");\r\n\r\n  let notes_list = (\r\n    <div className=\"quicknotes-list\">\r\n      {quicknotes\r\n        .filter(\r\n          (note: any) =>\r\n            note.title.toLowerCase().includes(QNSearchText.toLowerCase()) ||\r\n            note.body.toLowerCase().includes(QNSearchText.toLowerCase())\r\n        )\r\n        .map((note: any) => (\r\n          <Quicknote\r\n            key={note.id}\r\n            type={note.type}\r\n            id={note.id}\r\n            title={note.title}\r\n            color={note.color}\r\n            body={note.body}\r\n            lastModified={note.lastModified}\r\n            favorited={note.favorited}\r\n            notes={quicknotes}\r\n            currentNote={note}\r\n            handleDeleteQuicknote={handleDeleteQuicknote}\r\n            handleUpdateQuicknote={handleUpdateQuicknote}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"sub-header\">\r\n        <div className=\"sub-header-left\">\r\n          <h1>Quicknotes</h1>\r\n        </div>\r\n        <div className=\"sub-header-right\">\r\n          <Searchbar handleSearchNote={setQNSearchText} />\r\n          <div className=\"sub-header-buttons\">\r\n            <ul>\r\n              <li onClick={handleAddQuicknote} title=\"New Note\">\r\n                <RiAddLine />\r\n              </li>\r\n              <li onClick={openQNHelp} title=\"Help\">\r\n                <MdHelpOutline />\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div className=\"main-content-wrapper\">\r\n        {quicknotes.length !== 0 ? (\r\n          notes_list\r\n        ) : (\r\n          <div className=\"empty\">\r\n            <p>You have no saved quicknotes.</p>\r\n            <p>Create one now by pressing the + button in the menu above!</p>\r\n          </div>\r\n        )}\r\n        <QNHelp showQNHelp={showQNHelp} setShowQNHelp={setShowQNHelp} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default QuicknotesContent;\r\n","// React imports\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Component imports\r\nimport ColorMenu from \"../menus/ColorMenu\";\r\nimport ConfirmDelete from \"../menus/ConfirmDeleteMenu\";\r\n\r\n// Image and icon imports\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport { IoMdMenu } from \"react-icons/io\";\r\n\r\nexport interface MarknoteProps {\r\n  // Props to store marknote data\r\n  type: string;\r\n  id: string;\r\n  title: string;\r\n  color: string;\r\n  body: string;\r\n  lastModified: number;\r\n  favorited: Boolean;\r\n\r\n  // Props for children of MarknotesContent\r\n  currentNote?: any;\r\n  handleUpdateMarknote?: (\r\n    currentMarknote: MarknoteProps,\r\n    updatedMarknote: any\r\n  ) => void;\r\n  handleDeleteMarknote?: (noteId: any) => void;\r\n}\r\n\r\nconst Marknote = ({\r\n  currentNote,\r\n  handleUpdateMarknote,\r\n  handleDeleteMarknote,\r\n}: MarknoteProps) => {\r\n  // Menu state\r\n  const [showColorMenu, setShowColorMenu] = useState(false);\r\n\r\n  /**\r\n   * Function to handle a change in the note's color.\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleEditColor = (color: any) => {\r\n    if (handleUpdateMarknote) {\r\n      handleUpdateMarknote(currentNote, {\r\n        ...currentNote,\r\n        color: color,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to toggle the color menu\r\n   * TODO: Change event type\r\n   */\r\n  const toggleColorMenu = (event: any) => {\r\n    // Prevent parent link from redirecting\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n\r\n    // Toggle display of component\r\n    setShowColorMenu((prev) => !prev);\r\n  };\r\n\r\n  // Marknote Delete Menu state\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the confirm delete menu\r\n   * TODO: Change event type\r\n   */\r\n  const toggleConfirmDelete = (event: any) => {\r\n    // Prevent parent link from redirecting\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n\r\n    // Toggle display of component\r\n    setShowConfirmDelete((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"marknote\">\r\n      <Link className=\"marknote-link\" to={`/marknotes/${currentNote.id}`}>\r\n        <div\r\n          className=\"marknote-header\"\r\n          style={{ backgroundColor: currentNote.color }}\r\n        >\r\n          <span className=\"marknote-name\">\r\n            {currentNote.title.trim().length !== 0 ? (\r\n              currentNote.title\r\n            ) : (\r\n              <span className=\"italic\">Untitled Note</span>\r\n            )}\r\n          </span>\r\n          <button className=\"color-menu-button marknote-button\">\r\n            <IoMdMenu onClick={toggleColorMenu} />\r\n          </button>\r\n          <button\r\n            title=\"Delete Note\"\r\n            className=\"delete-note-button marknote-button\"\r\n            onClick={toggleConfirmDelete}\r\n          >\r\n            <TiDelete className=\"delete-icon\" size=\"1.2em\" />\r\n          </button>\r\n        </div>\r\n        <div className=\"marknote-content\">\r\n          <span>\r\n            {currentNote.body.length > 0 ? (\r\n              currentNote.body && currentNote.body.substr(0, 150) + \"...\"\r\n            ) : (\r\n              <span className=\"italic\">This note is empty.</span>\r\n            )}\r\n          </span>\r\n          <div className=\"marknote-footer\">\r\n            <div className=\"marknote-footer-left\">\r\n              <small>Last Modifed:</small>\r\n            </div>\r\n            <div className=\"marknote-footer-right\">\r\n              <small>\r\n                {new Date(currentNote.lastModified).toLocaleDateString(\"en-US\", {\r\n                  hour: \"2-digit\",\r\n                  minute: \"2-digit\",\r\n                })}\r\n              </small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n      <ColorMenu\r\n        showColorMenu={showColorMenu}\r\n        setShowColorMenu={setShowColorMenu}\r\n        handleEditColor={handleEditColor}\r\n      />\r\n      <ConfirmDelete\r\n        currentNote={currentNote}\r\n        showMenuState={showConfirmDelete}\r\n        setShowMenuState={setShowConfirmDelete}\r\n        handleDeleteNote={handleDeleteMarknote}\r\n        toggleConfirmDelete={toggleConfirmDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Marknote;\r\n","/* Marknotes Help Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n\r\n// Component imports\r\nimport ModalMenu from \"../menus/ModalMenu\";\r\n\r\nexport interface MNHelpProps {\r\n  showMNHelp: any;\r\n  setShowMNHelp: any;\r\n}\r\n\r\nconst MNHelp = ({ showMNHelp, setShowMNHelp }: MNHelpProps) => {\r\n  return (\r\n    <ModalMenu\r\n      heading=\"Marknotes Help\"\r\n      showMenuState={showMNHelp}\r\n      setShowMenuState={setShowMNHelp}\r\n    >\r\n      <p>\r\n        Marknotes are editable documents where you can use markdown syntax in\r\n        your notes to add styling.\r\n      </p>\r\n      <p>To add a new note, click the + button in the menu.</p>\r\n      <p>\r\n        To delete a note, click the delete button at the top right of the notes.\r\n        Deletions are permanent.\r\n      </p>\r\n      <p>\r\n        To open the editor to edit and preview your marknotes, click the\r\n        marknote in the menu.\r\n      </p>\r\n      <p>\r\n        All notes are automatically saved when they are edited, created, or\r\n        deleted.\r\n      </p>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default MNHelp;\r\n","// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { css } from \"@emotion/react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Common imports\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport { MarknoteProps } from \"./Marknote\";\r\nimport ColorMenu from \"../menus/ColorMenu\";\r\nimport ConfirmDelete from \"../menus/ConfirmDeleteMenu\";\r\n\r\n// Image and icon imports\r\nimport { IoReturnUpForward } from \"react-icons/io5\";\r\nimport { TiStarOutline, TiStar } from \"react-icons/ti\";\r\nimport { RiEdit2Line } from \"react-icons/ri\";\r\nimport { MdDeleteForever } from \"react-icons/md\";\r\n\r\nexport interface EditorProps {\r\n  currentNote: MarknoteProps;\r\n  handleDeleteMarknote: (noteId: any) => void;\r\n  handleUpdateMarknote: (\r\n    currentMarknote: MarknoteProps,\r\n    updatedMarknote: any\r\n  ) => void;\r\n  setRedirect?: any;\r\n}\r\n\r\n// Should declare outside of function component, but need to declare here for dynamic styles\r\n// Issue: input is rerendered each time input is given, losing focus\r\n// Logic from this thread: https://github.com/emotion-js/emotion/issues/1797\r\nconst SubheaderStyles = ({ color }: { color: string }) =>\r\n  css`\r\n    background: ${color};\r\n  `;\r\nconst Subheader = styled.section`\r\n  ${SubheaderStyles}\r\n`;\r\n\r\nconst TitleInputStyles = ({ color }: { color: string }) =>\r\n  css`\r\n    background: ${color};\r\n  `;\r\nconst TitleInput = styled.input`\r\n  ${TitleInputStyles}\r\n`;\r\n\r\nconst SubheaderButtonStyles = ({\r\n  color,\r\n  color2,\r\n}: {\r\n  color: string;\r\n  color2: string;\r\n}) =>\r\n  css`\r\n    backgrouund: ${color};\r\n    &:hover {\r\n      background: ${color2};\r\n    }\r\n  `;\r\nconst SubheaderButton = styled.li`\r\n  ${SubheaderButtonStyles}\r\n`;\r\n\r\nconst Editor = ({\r\n  currentNote,\r\n  handleDeleteMarknote,\r\n  handleUpdateMarknote,\r\n  setRedirect,\r\n}: EditorProps) => {\r\n  // Logic to determine colors\r\n  /**\r\n   * TODO: Change subheader text colors for Lemon and Lime\r\n   */\r\n  let color = currentNote.color;\r\n  let color_light;\r\n  switch (color) {\r\n    case COLOR.RED:\r\n      color_light = COLOR.RED_LIGHT;\r\n      break;\r\n    case COLOR.ORANGE:\r\n      color_light = COLOR.ORANGE_LIGHT;\r\n      break;\r\n    case COLOR.YELLOW:\r\n      color_light = COLOR.YELLOW_LIGHT;\r\n      break;\r\n    case COLOR.GREEN:\r\n      color_light = COLOR.GREEN_LIGHT;\r\n      break;\r\n    case COLOR.BLUE:\r\n      color_light = COLOR.BLUE_LIGHT;\r\n      break;\r\n    case COLOR.PURPLE:\r\n      color_light = COLOR.PURPLE_LIGHT;\r\n      break;\r\n    case COLOR.PINK:\r\n      color_light = COLOR.PINK_LIGHT;\r\n      break;\r\n    case COLOR.CYAN:\r\n      color_light = COLOR.CYAN_LIGHT;\r\n      break;\r\n    case COLOR.LEMON:\r\n      color_light = COLOR.LEMON_LIGHT;\r\n      break;\r\n    case COLOR.LIME:\r\n      color_light = COLOR.LIME_LIGHT;\r\n      break;\r\n    case COLOR.GREY:\r\n      color_light = COLOR.GREY_LIGHT;\r\n      break;\r\n    case COLOR.GREY_DARK:\r\n      color_light = COLOR.GREY_DARK_LIGHT;\r\n      break;\r\n    default:\r\n      color_light = COLOR.GREY_LIGHT;\r\n      break;\r\n  }\r\n\r\n  // Menu state\r\n  const [showColorMenu, setShowColorMenu] = useState(false);\r\n\r\n  /**\r\n   * Function to handle a change in the note's color.\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleEditColor = (color: any) => {\r\n    if (handleUpdateMarknote) {\r\n      handleUpdateMarknote(currentNote, {\r\n        ...currentNote,\r\n        color: color,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to toggle the color menu\r\n   * TODO: Change event type\r\n   */\r\n  const toggleColorMenu = (event: any) => {\r\n    // Prevent parent link from redirecting\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n\r\n    // Toggle display of component\r\n    setShowColorMenu((prev) => !prev);\r\n  };\r\n\r\n  /**\r\n   * Function to handle changes in a note's field\r\n   * @param key The field being changed\r\n   * @param value The new value of the field\r\n   */\r\n  const handleEditField = (key: string, value: string | Boolean) => {\r\n    handleUpdateMarknote(currentNote, {\r\n      ...currentNote,\r\n      [key]: value,\r\n      lastModified: Date.now(),\r\n    });\r\n  };\r\n\r\n  // Quicknote Delete Menu state\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the confirm delete menu\r\n   */\r\n  const toggleConfirmDelete = () => {\r\n    setShowConfirmDelete((prev) => !prev);\r\n  };\r\n\r\n  // Reset redirect when editor mounts\r\n  useEffect(() => {\r\n    setRedirect(<></>);\r\n  }, [setRedirect]);\r\n\r\n  return (\r\n    <div className=\"editor-main\">\r\n      <Subheader className=\"sub-header\" color={color}>\r\n        <TitleInput\r\n          type=\"text\"\r\n          className=\"editor-title\"\r\n          placeholder=\"Enter a title...\"\r\n          value={currentNote.title}\r\n          onChange={(event) => handleEditField(\"title\", event.target.value)}\r\n          color={color_light}\r\n        />\r\n        <div className=\"sub-header-buttons\">\r\n          <ul>\r\n            <SubheaderButton\r\n              title=\"Options\"\r\n              color={color}\r\n              color2={color_light}\r\n              onClick={toggleColorMenu}\r\n            >\r\n              <RiEdit2Line />\r\n            </SubheaderButton>\r\n            <SubheaderButton\r\n              title=\"Delete Note\"\r\n              color={color}\r\n              color2={color_light}\r\n              onClick={toggleConfirmDelete}\r\n            >\r\n              <MdDeleteForever />\r\n            </SubheaderButton>\r\n            <SubheaderButton\r\n              title=\"Favorite\"\r\n              color={color}\r\n              color2={color_light}\r\n              onClick={() => handleEditField(\"favorited\", currentNote.favorited === true ? false : true)}\r\n            >\r\n              {currentNote.favorited === false ? <TiStarOutline /> : <TiStar />}\r\n            </SubheaderButton>\r\n            <SubheaderButton\r\n              title=\"Return to Notes\"\r\n              color={color}\r\n              color2={color_light}\r\n            >\r\n              <Link to=\"/marknotes\">\r\n                <IoReturnUpForward />\r\n              </Link>\r\n            </SubheaderButton>\r\n          </ul>\r\n        </div>\r\n      </Subheader>\r\n      <div className=\"editor-content\">\r\n        <section className=\"editor-container\">\r\n          <textarea\r\n            className=\"editor-body\"\r\n            placeholder=\"Write your note here!&#10;You can use markdown syntax to style your note.\"\r\n            value={currentNote.body}\r\n            onChange={(event) => handleEditField(\"body\", event.target.value)}\r\n          />\r\n        </section>\r\n        <section className=\"preview-container\">\r\n          <ReactMarkdown className=\"preview-body\">\r\n            {currentNote.body}\r\n          </ReactMarkdown>\r\n        </section>\r\n      </div>\r\n      <ColorMenu\r\n        showColorMenu={showColorMenu}\r\n        setShowColorMenu={setShowColorMenu}\r\n        handleEditColor={handleEditColor}\r\n      />\r\n      <ConfirmDelete\r\n        currentNote={currentNote}\r\n        showMenuState={showConfirmDelete}\r\n        setShowMenuState={setShowConfirmDelete}\r\n        handleDeleteNote={handleDeleteMarknote}\r\n        toggleConfirmDelete={toggleConfirmDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","/* Marknotes Main Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Common imports\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport Marknote, { MarknoteProps } from \"./Marknote\";\r\nimport MNHelp from \"./MNHelp\";\r\nimport Editor from \"./Editor\";\r\nimport Searchbar from \"../Searchbar\";\r\n\r\n// Image and icon impaorts\r\nimport { RiAddLine } from \"react-icons/ri\";\r\nimport { MdHelpOutline } from \"react-icons/md\";\r\n\r\nexport interface MarknotesContentProps {\r\n  history?: any;\r\n}\r\n\r\n/**\r\n * Content for marknotes route\r\n */\r\nconst MarknotesContent = ({ history }: MarknotesContentProps) => {\r\n  const [marknotes, setMarknotes] = useState<MarknoteProps[]>([]);\r\n  const local = \"denote_marknotes\";\r\n\r\n  /**\r\n   * Effect hook to retrieve marknotes from local storage\r\n   */\r\n  useEffect(() => {\r\n    const savedMarknotes = JSON.parse(localStorage.getItem(local) || \"{}\");\r\n    // Check if notes were received\r\n    if (savedMarknotes) {\r\n      setMarknotes(savedMarknotes);\r\n    }\r\n  }, []); // Run on load\r\n\r\n  /**\r\n   * Effect hook to save marknotes to local storage when change is made\r\n   */\r\n  useEffect(() => {\r\n    localStorage.setItem(local, JSON.stringify(marknotes));\r\n  }, [marknotes]);\r\n\r\n  // Redirect state\r\n  const [redirect, setRedirect] = useState(<></>);\r\n\r\n  /**\r\n   * Marknote function to add a new empty marknote to the list\r\n   */\r\n  const handleAddMarknote = () => {\r\n    // Add new to state list\r\n    const newMarknote = {\r\n      type: \"marknote\",\r\n      id: nanoid(),\r\n      title: \"\",\r\n      body: \"\",\r\n      lastModified: Date.now(),\r\n      color: COLOR.GREY_DARK,\r\n      favorited: false,\r\n    };\r\n\r\n    setMarknotes([...marknotes, newMarknote]);\r\n\r\n    // Redirect when new note is added\r\n    setRedirect(<Redirect to={`/marknotes/${newMarknote.id}`} />);\r\n  };\r\n\r\n  /**\r\n   * Marknote function to delete a marknote from the list\r\n   * @param noteId The id of the marknote to be deleted\r\n   */\r\n  const handleDeleteMarknote = (noteId: any) => {\r\n    // Use filter to check if id is the one we're deleting\r\n    // If n ot, keep; Otherwise, remove\r\n    setMarknotes(marknotes.filter((note: any) => note.id !== noteId));\r\n  };\r\n\r\n  /**\r\n   * Marknote function to update a marknote in the list\r\n   * @param currentMarknote The marknote being updated\r\n   * @param updatedMarknote The data to update the marknote with\r\n   */\r\n  const handleUpdateMarknote = (\r\n    currentMarknote: MarknoteProps,\r\n    updatedMarknote: any\r\n  ) => {\r\n    const updatedMarknotesArray = marknotes.map((note: any) => {\r\n      if (note.id === currentMarknote.id) {\r\n        return updatedMarknote;\r\n      }\r\n      return note;\r\n    });\r\n    setMarknotes(updatedMarknotesArray);\r\n  };\r\n\r\n  // Sort notes in descending order from last modifed date\r\n  const sortedMarknotes = marknotes.sort(\r\n    (a: any, b: any) => b.lastModified - a.lastModified\r\n  );\r\n\r\n  // Help menu state\r\n  const [showMNHelp, setShowMNHelp] = useState(false);\r\n\r\n  const openMNHelp = () => {\r\n    setShowMNHelp((prev) => !prev);\r\n  };\r\n\r\n  /**\r\n   * State for marknotes search text\r\n   */\r\n  const [MNSearchText, setMNSearchText] = useState(\"\");\r\n\r\n  let notes_list = (\r\n    <div className=\"marknotes-list\">\r\n      {sortedMarknotes\r\n        .filter(\r\n          (note) =>\r\n            note.title.toLowerCase().includes(MNSearchText.toLowerCase()) ||\r\n            note.body.toLowerCase().includes(MNSearchText.toLowerCase())\r\n        )\r\n        .map((note) => (\r\n          <Marknote\r\n            key={note.id}\r\n            type={note.type}\r\n            id={note.id}\r\n            title={note.title}\r\n            color={note.color}\r\n            body={note.body}\r\n            lastModified={note.lastModified}\r\n            favorited={note.favorited}\r\n            currentNote={note}\r\n            handleUpdateMarknote={handleUpdateMarknote}\r\n            handleDeleteMarknote={handleDeleteMarknote}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n\r\n  // TODO: Redirect to editor page when creating new marknote\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/marknotes\">\r\n        <section className=\"sub-header\">\r\n          <div className=\"sub-header-left\">\r\n            <h1>Marknotes</h1>\r\n          </div>\r\n          <div className=\"sub-header-right\">\r\n            <Searchbar handleSearchNote={setMNSearchText} />\r\n            <div className=\"sub-header-buttons\">\r\n              <ul>\r\n                <li onClick={handleAddMarknote} title=\"New Note\">\r\n                  <RiAddLine />\r\n                </li>\r\n                <li onClick={openMNHelp} title=\"Help\">\r\n                  <MdHelpOutline />\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <div className=\"main-content-wrapper\">\r\n          {marknotes.length !== 0 ? (\r\n            notes_list\r\n          ) : (\r\n            <div className=\"empty\">\r\n              <p>You have no saved marknotes.</p>\r\n              <p>Create one now by pressing the + button in the menu above!</p>\r\n            </div>\r\n          )}\r\n          {redirect}\r\n        </div>\r\n        <MNHelp showMNHelp={showMNHelp} setShowMNHelp={setShowMNHelp} />\r\n      </Route>\r\n      {marknotes.map((note) => (\r\n        <Route key={note.id} path={`/marknotes/${note.id}`}>\r\n          <Editor\r\n            currentNote={note}\r\n            handleDeleteMarknote={handleDeleteMarknote}\r\n            handleUpdateMarknote={handleUpdateMarknote}\r\n            setRedirect={setRedirect}\r\n          />\r\n        </Route>\r\n      ))}\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default MarknotesContent;\r\n","/* Settings Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\nexport interface SettingsContentProps {}\r\n\r\nconst SettingsContent = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"sub-header\">\r\n        <h1>Settings</h1>\r\n      </section>\r\n      <div className=\"main-content-wrapper\">\r\n        <div>Settings</div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SettingsContent;\r\n","/* Main App Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// Component imports\r\nimport Header from \"./components/Header\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nimport HomeContent from \"./components/home/HomeContent\";\r\nimport QuicknotesContent from \"./components/quicknotes/QuicknotesContent\";\r\nimport MarknotesContent from \"./components/marknotes/MarknotesContent\";\r\nimport SettingsContent from \"./components/settings/SettingsContent\";\r\n\r\n// CSS imports\r\nimport \"./css/app.css\";\r\nimport \"./css/quicknotes.css\";\r\nimport \"./css/marknotes.css\";\r\n\r\n/**\r\n * Main application component\r\n */\r\nconst App = () => {\r\n  /* Marknotes state hook and methods\r\n  ------------------------------------------------------------------------------*/\r\n  // TODO: Move marknotes hooks and methods to MarknotesContent\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Router>\r\n        <div className=\"app-container\">\r\n          <Sidebar />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <main>\r\n                <HomeContent />\r\n              </main>\r\n            </Route>\r\n            <Route path=\"/quicknotes\">\r\n              <main>\r\n                <QuicknotesContent />\r\n              </main>\r\n            </Route>\r\n            <Route path=\"/marknotes\">\r\n              <main>\r\n                <MarknotesContent />\r\n              </main>\r\n            </Route>\r\n            <Route path=\"/settings\">\r\n              <main>\r\n                <SettingsContent />\r\n              </main>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Component imports\r\nimport App from './App';\r\n\r\n// CSS imports\r\nimport './css/index.css';\r\nimport './css/app.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}