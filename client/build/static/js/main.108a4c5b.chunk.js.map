{"version":3,"sources":["components/Header.tsx","components/Sidebar.tsx","components/Footer.tsx","common/styled.ts","common/color.ts","components/menus/ModalMenu.tsx","components/menus/ColorMenu.tsx","components/menus/ConfirmDeleteMenu.tsx","components/quicknotes/QNComponent.tsx","components/marknotes/MNComponent.tsx","components/home/HomeContent.tsx","components/quicknotes/QNHelp.tsx","components/Searchbar.tsx","components/quicknotes/QNContent.tsx","components/marknotes/MNHelp.tsx","components/marknotes/MNEditor.tsx","components/marknotes/MNPreview.tsx","components/marknotes/MNContent.tsx","components/settings/SettingsContent.tsx","components/App.tsx","index.tsx"],"names":["ipc","ipcRenderer","window","require","e","Restore","className","Maximize","Header","useState","windowMaximized","setWindowMaximized","windowIcon","setWindowIcon","window_button","document","getElementById","useEffect","title","id","onClick","send","Sidebar","selectedTab","setSelectedTab","tabs","selected","classList","add","filter","tab","temp","remove","to","Footer","href","SectionContainer","styled","section","SectionHeader","div","SectionTitle","h1","COLOR","ModalMenu","heading","children","showMenuState","setShowMenuState","menuRef","useRef","keyPress","useCallback","event","key","addEventListener","removeEventListener","Fragment","ref","current","target","closeMenu","prev","ColorMenu","showColorMenu","setShowColorMenu","handleEditColor","handleOnClick","dataset","color","ConfirmDelete","currentNote","handleDeleteNote","toggleConfirmDelete","redirect","trim","length","route","type","undefined","QNComponent","handleDeleteQuicknote","handleUpdateQuicknote","bodyCharLimit","body_limit","body","handleEditField","value","updateDate","Date","now","showConfirmDelete","setShowConfirmDelete","style","backgroundColor","favorited","placeholder","onChange","size","lastModified","toLocaleDateString","hour","minute","MNComponent","handleUpdateMarknote","handleDeleteMarknote","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","handleFavorite","Empty","HomeContent","quicknotes","marknotes","favoritedQuicknotes","note","map","notes","favoritedMarknotes","QNHelp","showQNHelp","setShowQNHelp","Searchbar","handleSearchNote","QNContent","setQuicknotes","QNSearchText","setQNSearchText","filteredQuicknotes","toLowerCase","includes","notes_list","searchEmpty","newQuicknote","nanoid","MNHelp","showMNHelp","setShowMNHelp","Subheader","css","TitleInput","input","SubheaderButton","button","color2","MNEditor","color_light","setRedirect","showEditor","setShowEditor","showPreview","setShowPreview","onBeforeChange","editor","data","options","lineWrapping","mode","lineNumbers","MNPreview","MNContent","setMarknotes","MNSearchText","setMNSearchText","filteredMarknotes","sort","a","b","exact","path","newMarknote","SettingsContent","App","quicknotesLocal","savedQuicknotes","JSON","parse","localStorage","getItem","setItem","stringify","currentQuicknote","updatedQuicknote","updatedQuicknotesArray","newQuicknotes","marknotesLocal","savedMarknotes","currentMarknote","updatedMarknote","updatedMarknotesArray","noteId","useLocation","pathname","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.108a4c5b.chunk.js","sourcesContent":["/* Header and Titlebar Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// Component imports\r\n\r\n// Image and icon imports\r\nimport { BiWindow, BiWindows } from \"react-icons/bi\";\r\nimport { FaRegWindowMinimize } from \"react-icons/fa\";\r\nimport { TiPower } from \"react-icons/ti\";\r\n\r\n// Import electron renderer\r\nlet ipc: any;\r\ntry {\r\n  const { ipcRenderer } = window.require(\"electron\");\r\n  ipc = ipcRenderer;\r\n} catch (e) {\r\n  // Do nothing\r\n}\r\n\r\n// Icon Components for Maximize/Restore button\r\nconst Restore = () => {\r\n  return <BiWindows className=\"window-icon\" />;\r\n};\r\n\r\nconst Maximize = () => {\r\n  return <BiWindow className=\"window-icon\" />;\r\n};\r\n\r\n// interface HeaderProps {}\r\n\r\nconst Header = () => {\r\n  // State to check if window is maximized\r\n  const [windowMaximized, setWindowMaximized] = useState(false);\r\n  const [windowIcon, setWindowIcon] = useState(<Maximize />);\r\n  const window_button = document.getElementById(\"window-button\");\r\n\r\n  // Button handlers\r\n  const handleOnClickClose = () => {\r\n    ipc.send(\"closeApp\");\r\n  };\r\n\r\n  const handleOnClickMinimize = () => {\r\n    ipc.send(\"minimizeApp\");\r\n  };\r\n\r\n  const handleOnClickMaximizeRestore = () => {\r\n    ipc.send(\"maximizeRestoreApp\");\r\n    setWindowMaximized(windowMaximized ? false : true);\r\n  };\r\n\r\n  // Effect hook to switch between maximize icon and restore icon\r\n  useEffect(() => {\r\n    setWindowIcon(windowMaximized ? <Restore /> : <Maximize />);\r\n    if (window_button !== null)\r\n      window_button.title = windowMaximized ? \"Restore Down\" : \"Maximize\";\r\n  }, [windowMaximized, window_button]);\r\n\r\n  return (\r\n    <header>\r\n      <div id=\"header-left\">\r\n        <div id=\"app-title\">Denote!</div>\r\n      </div>\r\n      <div id=\"header-drag\"></div>\r\n      {ipc ? (\r\n        <div id=\"title-bar-buttons\">\r\n          <ul>\r\n            <li onClick={handleOnClickMinimize} title=\"Minimize\">\r\n              <FaRegWindowMinimize id=\"minimize-icon\" />\r\n            </li>\r\n            <li id=\"window-button\" onClick={handleOnClickMaximizeRestore}>\r\n              {windowIcon}\r\n            </li>\r\n            <li\r\n              onClick={handleOnClickClose}\r\n              id=\"close-app-button\"\r\n              title=\"Close\"\r\n            >\r\n              <TiPower id=\"power-icon\" />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      ) : null}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// React imports\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Image and icon imports\r\nimport { BiNote, BiNotepad } from \"react-icons/bi\";\r\nimport { FiSettings } from \"react-icons/fi\";\r\nimport { TiHomeOutline } from \"react-icons/ti\";\r\n\r\nexport interface SidebarProps {\r\n  selectedTab: string;\r\n  setSelectedTab: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst Sidebar = ({ selectedTab, setSelectedTab }: SidebarProps) => {\r\n  const tabs = [\"/\", \"/quicknotes\", \"/marknotes\", \"/settings\"];\r\n  // const location = useLocation().pathname;\r\n\r\n  useEffect(() => {\r\n    let selected = document.getElementById(selectedTab);\r\n    if (selected !== null) selected.classList.add(\"selected\");\r\n    for (const tab of tabs.filter((tab) => tab !== selectedTab)) {\r\n      let temp = document.getElementById(tab);\r\n      if (temp !== null) temp.classList.remove(\"selected\");\r\n    }\r\n  });\r\n\r\n  return (\r\n    <section id=\"sidebar\">\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\" onClick={() => setSelectedTab(\"/\")} title=\"Home\">\r\n              <div id=\"/\" className=\"nav-button\" />\r\n              <TiHomeOutline className=\"nav-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/quicknotes\"\r\n              onClick={() => setSelectedTab(\"/quicknotes\")}\r\n              title=\"Quicknotes\"\r\n            >\r\n              <div id=\"/quicknotes\" className=\"nav-button\" />\r\n              <BiNote className=\"nav-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/marknotes\"\r\n              onClick={() => setSelectedTab(\"/marknotes\")}\r\n              title=\"Marknotes\"\r\n            >\r\n              <div id=\"/marknotes\" className=\"nav-button\" />\r\n              <BiNotepad className=\"nav-icon\" />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link\r\n              to=\"/settings\"\r\n              onClick={() => setSelectedTab(\"/settings\")}\r\n              title=\"Settings\"\r\n            >\r\n              <div id=\"/settings\" className=\"nav-button\" />\r\n              <FiSettings className=\"nav-icon settings-icon\" />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\n// Image and icon imports\r\nimport { VscGithub } from \"react-icons/vsc\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div id=\"github-link\"><VscGithub /><a href=\"https://github.com/fborja44/denote\">Github Repo</a></div>\r\n      <div id=\"cpy\">Francis Borja © 2021</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","/* Shared Styled Element definitions\r\n------------------------------------------------------------------------------*/\r\nimport styled from \"@emotion/styled\";\r\n\r\nexport const SectionContainer = styled.section`\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nexport const SectionHeader = styled.div`\r\n  border-bottom: solid 1px #5f5f5f;\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nexport const SectionTitle = styled.h1`\r\n  margin: 0 0 0.5em 0;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  color: #4f4f4f;\r\n  display: flex;\r\n  align-items: center;\r\n  * {\r\n    margin-right: 0.2em;\r\n  }\r\n  ,\r\n  svg {\r\n    font-size: 24px;\r\n  }\r\n`;","/* Color Code definitions\r\n------------------------------------------------------------------------------*/\r\nconst COLOR = {\r\n  BLACK: \"black\",\r\n  BLACK_HOVER: \"#151515\",\r\n  WHITE: \"white\",\r\n  WHITE_HOVER: \"#ededed\",\r\n  GREY: \"#b4b4b4\",\r\n  GREY_DARK: \"#828282\",\r\n  RED: \"#eb5757\",\r\n  RED_DARK: \"#cf4242\",\r\n  ORANGE: \"#f2994a\",\r\n  ORANGE_DARK: \"#e98034\",\r\n  YELLOW: \"#f2c94c\",\r\n  YELLOW_DARK: \"#edac2f\",\r\n  GREEN: \"#27ae60\",\r\n  GREEN_DARK: \"#2b9843\",\r\n  BLUE: \"#2f80ed\",\r\n  BLUE_DARK: \"#2c62cd\",\r\n  PURPLE: \"#bb6bd9\",\r\n  PURPLE_DARK: \"#964cc3\",\r\n  PINK: \"#f035a5\",\r\n  CYAN: \"#31C6DA\",\r\n  LEMON: \"#FAFF00\",\r\n  LIME: \"#58D744\",\r\n\r\n  /* Light versions */\r\n  GREY_LIGHT: \"#D2D2D2\",\r\n  GREY_DARK_LIGHT: \"#9F9F9F\",\r\n  RED_LIGHT: \"#F66F6F\",\r\n  ORANGE_LIGHT: \"#FFAE66\",\r\n  YELLOW_LIGHT: \"#FFD965\",\r\n  GREEN_LIGHT: \"#46CB7E\",\r\n  BLUE_LIGHT: \"#4C98FE\",\r\n  PURPLE_LIGHT: \"#D78CF3\",\r\n  PINK_LIGHT: \"#FC62BE\",\r\n  CYAN_LIGHT: \"#6DE4F4\",\r\n  LIME_LIGHT: \"#8EF17E\",\r\n  LEMON_LIGHT: \"#FDFF96\",\r\n};\r\n\r\nexport { COLOR };\r\n","/* Reusable Modal Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useRef, useEffect, useCallback } from \"react\";\r\n\r\n// Image and icon imports\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\nexport interface ModalMenuProps {\r\n  heading: string;\r\n  children: any;\r\n  showMenuState: boolean;\r\n  setShowMenuState: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst ModalMenu = ({\r\n  heading,\r\n  children,\r\n  showMenuState,\r\n  setShowMenuState,\r\n}: ModalMenuProps) => {\r\n  const menuRef: any = useRef();\r\n\r\n  /**\r\n   * Closes the menu\r\n   * Event can be from any element\r\n   */\r\n  const closeMenu = (\r\n    event: any,\r\n    setShowMenuState: React.Dispatch<React.SetStateAction<boolean>>\r\n  ) => {\r\n    if (menuRef.current === event.target) {\r\n      setShowMenuState(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Closes menu on ESC keypress\r\n   */\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === \"Escape\" && showMenuState) {\r\n        setShowMenuState(false);\r\n      }\r\n    },\r\n    [showMenuState, setShowMenuState]\r\n  );\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", keyPress);\r\n    return () => document.removeEventListener(\"keydown\", keyPress);\r\n  }, [keyPress]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/** Ternary Operator decides whether to show the menu or not */}\r\n      {showMenuState ? (\r\n        <div\r\n          ref={menuRef}\r\n          onClick={(event) => closeMenu(event, setShowMenuState)}\r\n          className=\"modal-menu-background\"\r\n        >\r\n          <section className=\"modal-menu-wrapper\">\r\n            <div className=\"modal-menu-header\">\r\n              <h1 className=\"modal-menu-title\">{heading}</h1>\r\n              <MdClose\r\n                className=\"modal-menu-close-button\"\r\n                aria-label=\"Close Menu\"\r\n                onClick={() => setShowMenuState((prev: boolean) => !prev)}\r\n              />\r\n            </div>\r\n            <div className=\"modal-menu-content-container\">{children}</div>\r\n          </section>\r\n        </div>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ModalMenu;\r\n","/* Color Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n\r\n// Common imports\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport ModalMenu from \"./ModalMenu\";\r\n\r\n// Image and icon imports\r\n\r\nexport interface ColorMenuProps {\r\n  showColorMenu: boolean;\r\n  setShowColorMenu: React.Dispatch<React.SetStateAction<boolean>>;\r\n  handleEditColor: (color: string) => void;\r\n}\r\n\r\nconst ColorMenu = ({\r\n  showColorMenu,\r\n  setShowColorMenu,\r\n  handleEditColor,\r\n}: ColorMenuProps) => {\r\n  /**\r\n   * On click handler to change color of note.\r\n   * Event target needs dataset attribute.\r\n   */\r\n  const handleOnClick = (event: any) => {\r\n    handleEditColor(event.target.dataset.color);\r\n    setShowColorMenu(false);\r\n  };\r\n\r\n  return (\r\n    <ModalMenu\r\n      heading=\"Choose Note Color\"\r\n      showMenuState={showColorMenu}\r\n      setShowMenuState={setShowColorMenu}\r\n    >\r\n      <div className=\"color-menu-content\">\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.RED}\r\n          className=\"color-option red\"\r\n          title=\"Red\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.ORANGE}\r\n          className=\"color-option orange\"\r\n          title=\"Orange\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.YELLOW}\r\n          className=\"color-option yellow\"\r\n          title=\"Yellow\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.GREEN}\r\n          className=\"color-option green\"\r\n          title=\"Green\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.BLUE}\r\n          className=\"color-option blue\"\r\n          title=\"Blue\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.PURPLE}\r\n          className=\"color-option purple\"\r\n          title=\"Purple\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.PINK}\r\n          className=\"color-option pink\"\r\n          title=\"Pink\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.CYAN}\r\n          className=\"color-option cyan\"\r\n          title=\"Cyan\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.LEMON}\r\n          className=\"color-option lemon\"\r\n          title=\"Lemon\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.LIME}\r\n          className=\"color-option lime\"\r\n          title=\"Lime\"\r\n        />\r\n        <div\r\n          onClick={handleOnClick}\r\n          data-color={COLOR.GREY}\r\n          className=\"color-option grey\"\r\n          title=\"Grey\"\r\n        />\r\n        <div\r\n          onClick={(event) => handleOnClick(event)}\r\n          data-color={COLOR.GREY_DARK}\r\n          className=\"color-option grey-dark\"\r\n          title=\"Dark Grey\"\r\n        />\r\n      </div>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default ColorMenu;\r\n","/* Searchbar Component\r\n------------------------------------------------------------------------------*/\r\n// React import\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Common imports\r\nimport { Quicknote, Marknote } from \"../../common/types\";\r\n\r\n// Component Imports\r\nimport ModalMenu from \"./ModalMenu\";\r\n\r\nexport interface ConfirmDeleteProps {\r\n  currentNote: Marknote | Quicknote;\r\n  showMenuState: boolean;\r\n  setShowMenuState: React.Dispatch<React.SetStateAction<boolean>>;\r\n  handleDeleteNote?: (id: string) => void;\r\n  toggleConfirmDelete: (event: any) => void;\r\n  redirect?: Boolean;\r\n}\r\n\r\nconst ConfirmDelete = ({\r\n  currentNote,\r\n  showMenuState,\r\n  setShowMenuState,\r\n  handleDeleteNote,\r\n  toggleConfirmDelete,\r\n  redirect,\r\n}: ConfirmDeleteProps) => {\r\n  // Check if note title is empty\r\n  const title =\r\n    currentNote.title.trim().length === 0 ? \"Untitled Note\" : currentNote.title;\r\n\r\n  // Check note type to determine route\r\n  const route = currentNote.type === \"marknote\" ? \"marknotes\" : \"quicknotes\";\r\n\r\n  return (\r\n    <ModalMenu\r\n      heading={`Delete \"${title}\"?`}\r\n      showMenuState={showMenuState}\r\n      setShowMenuState={setShowMenuState}\r\n    >\r\n      <div className=\"delete-menu-text\">\r\n        <p>This action cannot be reversed.</p>\r\n        {redirect ? (\r\n          <Link\r\n            to={`/${route}`}\r\n            className=\"delete-menu-button\"\r\n            onClick={\r\n              handleDeleteNote\r\n                ? (event) => {\r\n                    handleDeleteNote(currentNote.id);\r\n                    toggleConfirmDelete(event);\r\n                  }\r\n                : undefined\r\n            }\r\n          >\r\n            Confirm\r\n          </Link>\r\n        ) : (\r\n          <button\r\n            className=\"delete-menu-button\"\r\n            onClick={\r\n              handleDeleteNote\r\n                ? (event) => {\r\n                    handleDeleteNote(currentNote.id);\r\n                    toggleConfirmDelete(event);\r\n                  }\r\n                : undefined\r\n            }\r\n          >\r\n            Confirm\r\n          </button>\r\n        )}\r\n      </div>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","// React imports\r\nimport React, { useState } from \"react\";\r\n\r\n// Common imports\r\nimport { Quicknote } from \"../../common/types\";\r\n\r\n// Component imports\r\nimport ColorMenu from \"../menus/ColorMenu\";\r\nimport ConfirmDelete from \"../menus/ConfirmDeleteMenu\";\r\n\r\n// Image and icon imports\r\nimport { TiDelete, TiStarOutline, TiStar } from \"react-icons/ti\";\r\nimport { IoMdMenu } from \"react-icons/io\";\r\n\r\nexport interface QNComponentProps {\r\n  // Props for children of QuicknotesContent\r\n  notes: Quicknote[];\r\n  currentNote: Quicknote;\r\n  handleDeleteQuicknote?: (id: string) => void;\r\n  handleUpdateQuicknote?: (\r\n    currentQuicknote: Quicknote,\r\n    updatedQuicknote: Quicknote\r\n  ) => void;\r\n}\r\n\r\nconst QNComponent = ({\r\n  currentNote,\r\n  handleDeleteQuicknote,\r\n  handleUpdateQuicknote,\r\n}: QNComponentProps) => {\r\n  // Character limits\r\n  const titleCharLimit = 30;\r\n  const bodyCharLimit = 300;\r\n  let body_limit = bodyCharLimit;\r\n\r\n  if (currentNote.body) {\r\n    body_limit -= currentNote.body.length;\r\n  }\r\n\r\n  /**\r\n   * Function to handle changes in a note's field.\r\n   * @param key The field being changed\r\n   * @param value The new value of the field\r\n   * @param updateDate If true, updates the note's last modified date. [default=false]\r\n   */\r\n  const handleEditField = (\r\n    key: string,\r\n    value: any,\r\n    updateDate: Boolean = true\r\n  ) => {\r\n    // Check character limit\r\n    if (\r\n      (key === \"title\" && titleCharLimit - value.length < 0) ||\r\n      (key === \"body\" && bodyCharLimit - value.length < 0)\r\n    ) {\r\n      return;\r\n    } else {\r\n      if (handleUpdateQuicknote) {\r\n        if (updateDate) {\r\n          handleUpdateQuicknote(currentNote, {\r\n            ...currentNote,\r\n            [key]: value,\r\n            lastModified: Date.now(),\r\n          });\r\n        } else {\r\n          handleUpdateQuicknote(currentNote, {\r\n            ...currentNote,\r\n            [key]: value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to handle a change in the note's color.\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleEditColor = (color: string) => {\r\n    handleEditField(\"color\", color, false);\r\n  };\r\n\r\n  /**\r\n   * Function to toggle whether a note is favorited\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleFavorite = () => {\r\n    handleEditField(\"favorited\", currentNote.favorited ? false : true, false);\r\n  };\r\n\r\n  // Menu state\r\n  const [showColorMenu, setShowColorMenu] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the color menu\r\n   */\r\n  const toggleColorMenu = () => {\r\n    setShowColorMenu((prev) => !prev); // Toggle off and on\r\n  };\r\n\r\n  // Quicknote Delete Menu state\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the confirm delete menu\r\n   */\r\n  const toggleConfirmDelete = () => {\r\n    setShowConfirmDelete((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"quicknote\">\r\n      <div\r\n        className=\"quicknote-header note-header\"\r\n        style={{ backgroundColor: currentNote.color }}\r\n      >\r\n        {handleUpdateQuicknote && (\r\n          <button\r\n            title=\"Favorite\"\r\n            className=\"favorite-note-button note-button\"\r\n            onClick={handleFavorite}\r\n          >\r\n            {currentNote.favorited ? <TiStar /> : <TiStarOutline />}\r\n          </button>\r\n        )}\r\n        <input\r\n          className=\"quicknote-title note-name\"\r\n          value={currentNote.title}\r\n          placeholder=\"Enter a title...\"\r\n          onChange={(event) => handleEditField(\"title\", event.target.value)}\r\n        />\r\n        {handleUpdateQuicknote && (\r\n          <button\r\n            title=\"Options\"\r\n            onClick={toggleColorMenu}\r\n            className=\"color-menu-button note-button\"\r\n          >\r\n            <IoMdMenu />\r\n          </button>\r\n        )}\r\n        {handleDeleteQuicknote && (\r\n          <button\r\n            title=\"Delete\"\r\n            className=\"delete-note-button note-button\"\r\n            onClick={toggleConfirmDelete}\r\n          >\r\n            <TiDelete className=\"delete-icon\" size=\"1.2em\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n      <div className=\"quicknote-content note-content\">\r\n        <textarea\r\n          className=\"quicknote-body note-body\"\r\n          placeholder=\"Write your note here...\"\r\n          value={currentNote.body}\r\n          onChange={(event) => handleEditField(\"body\", event.target.value)}\r\n        />\r\n        <div className=\"quicknote-footer note-footer\">\r\n          <div className=\"quicknote-footer-left note-footer-left\">\r\n            <small>\r\n              {new Date(currentNote.lastModified).toLocaleDateString(\"en-US\", {\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n              })}\r\n            </small>\r\n          </div>\r\n          <div className=\"quicknote-footer-right note-footer-right\">\r\n            <small>\r\n              {body_limit}/{bodyCharLimit}\r\n            </small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ColorMenu\r\n        showColorMenu={showColorMenu}\r\n        setShowColorMenu={setShowColorMenu}\r\n        handleEditColor={handleEditColor}\r\n      />\r\n      <ConfirmDelete\r\n        currentNote={currentNote}\r\n        showMenuState={showConfirmDelete}\r\n        setShowMenuState={setShowConfirmDelete}\r\n        handleDeleteNote={handleDeleteQuicknote}\r\n        toggleConfirmDelete={toggleConfirmDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QNComponent;\r\n","/* Marknote Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Common imports\r\nimport { Marknote } from \"../../common/types\";\r\n\r\n// Component imports\r\nimport ColorMenu from \"../menus/ColorMenu\";\r\nimport ConfirmDelete from \"../menus/ConfirmDeleteMenu\";\r\n\r\n// Image and icon imports\r\nimport { TiDelete, TiStarOutline, TiStar } from \"react-icons/ti\";\r\nimport { IoMdMenu } from \"react-icons/io\";\r\n\r\nexport interface MNComponentProps {\r\n  currentNote: Marknote;\r\n  handleUpdateMarknote?: (\r\n    currentMarknote: Marknote,\r\n    updatedMarknote: Marknote\r\n  ) => void;\r\n  handleDeleteMarknote?: (noteId: string) => void;\r\n  setSelectedTab: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst MNComponent = ({\r\n  currentNote,\r\n  handleUpdateMarknote,\r\n  handleDeleteMarknote,\r\n  setSelectedTab,\r\n}: MNComponentProps) => {\r\n  // Menu state\r\n  const [showColorMenu, setShowColorMenu] = useState(false);\r\n\r\n  /**\r\n   * Function to handle changes in a note's field\r\n   * @param key The field being changed\r\n   * @param value The new value of the field\r\n   * @param updateDate If true, updates the note's last modified date. [default=false]\r\n   */\r\n  const handleEditField = (\r\n    key: string,\r\n    value: string | Boolean,\r\n    updateDate: Boolean = true\r\n  ) => {\r\n    if (handleUpdateMarknote)\r\n      if (updateDate) {\r\n        handleUpdateMarknote(currentNote, {\r\n          ...currentNote,\r\n          [key]: value,\r\n          lastModified: Date.now(),\r\n        });\r\n      } else {\r\n        handleUpdateMarknote(currentNote, {\r\n          ...currentNote,\r\n          [key]: value,\r\n        });\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Function to handle a change in the note's color.\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleEditColor = (color: string) => {\r\n    handleEditField(\"color\", color, false);\r\n  };\r\n\r\n  /**\r\n   * Function to toggle whether a note is favorited\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleFavorite = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n    handleEditField(\"favorited\", currentNote.favorited ? false : true, false);\r\n  };\r\n\r\n  /**\r\n   * Function to toggle the color menu\r\n   */\r\n  const toggleColorMenu = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    // Prevent parent link from redirecting\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n\r\n    // Toggle display of component\r\n    setShowColorMenu((prev) => !prev);\r\n  };\r\n\r\n  // Marknote Delete Menu state\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the confirm delete menu\r\n   */\r\n  const toggleConfirmDelete = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    // Prevent parent link from redirecting\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n\r\n    // Toggle display of component\r\n    setShowConfirmDelete((prev) => !prev);\r\n  };\r\n\r\n  const previewFrame = `\r\n    <html>\r\n      <body>${currentNote.body}</body>\r\n    </html>\r\n  `;\r\n\r\n  return (\r\n    <div className=\"marknote\">\r\n      <Link\r\n        className=\"marknote-link\"\r\n        to={`/marknotes/${currentNote.id}`}\r\n        onClick={() => setSelectedTab(\"/marknotes\")}\r\n      >\r\n        <div\r\n          className=\"marknote-header note-header\"\r\n          style={{ backgroundColor: currentNote.color }}\r\n        >\r\n          {handleUpdateMarknote && (\r\n            <button\r\n              title=\"Favorite\"\r\n              className=\"favorite-note-button note-button\"\r\n              onClick={(event) => handleFavorite(event)}\r\n            >\r\n              {currentNote.favorited ? <TiStar /> : <TiStarOutline />}\r\n            </button>\r\n          )}\r\n          <span className=\"marknote-name note-name\">\r\n            {currentNote.title.trim().length !== 0 ? (\r\n              currentNote.title\r\n            ) : (\r\n              <span className=\"italic\">Untitled Note</span>\r\n            )}\r\n          </span>\r\n          {handleUpdateMarknote && (\r\n            <button\r\n              title=\"Options\"\r\n              className=\"color-menu-button note-button\"\r\n              onClick={toggleColorMenu}\r\n            >\r\n              <IoMdMenu />\r\n            </button>\r\n          )}\r\n          {handleDeleteMarknote && (\r\n            <button\r\n              title=\"Delete Note\"\r\n              className=\"delete-note-button note-button\"\r\n              onClick={toggleConfirmDelete}\r\n            >\r\n              <TiDelete className=\"delete-icon\" size=\"1.2em\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className=\"marknote-content note-content\">\r\n          <span className=\"note-body\">\r\n            {currentNote.body.length > 0 ? (\r\n              currentNote.body\r\n            ) : (\r\n              <span className=\"italic\">This note is empty.</span>\r\n            )}\r\n          </span>\r\n          <div className=\"marknote-footer note-footer\">\r\n            <div className=\"marknote-footer-left note-footer-left\">\r\n              <small>Last Modifed:</small>\r\n            </div>\r\n            <div className=\"marknote-footer-right note-footer-right\">\r\n              <small>\r\n                {new Date(currentNote.lastModified).toLocaleDateString(\r\n                  \"en-US\",\r\n                  {\r\n                    hour: \"2-digit\",\r\n                    minute: \"2-digit\",\r\n                  }\r\n                )}\r\n              </small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n      <ColorMenu\r\n        showColorMenu={showColorMenu}\r\n        setShowColorMenu={setShowColorMenu}\r\n        handleEditColor={handleEditColor}\r\n      />\r\n      <ConfirmDelete\r\n        currentNote={currentNote}\r\n        showMenuState={showConfirmDelete}\r\n        setShowMenuState={setShowConfirmDelete}\r\n        handleDeleteNote={handleDeleteMarknote}\r\n        toggleConfirmDelete={toggleConfirmDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MNComponent;\r\n","/* Home Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Common imports\r\nimport { Quicknote, Marknote } from \"../../common/types\";\r\nimport { SectionContainer, SectionHeader, SectionTitle } from \"../../common/styled\";\r\nimport QNComponent from \"../quicknotes/QNComponent\";\r\nimport MNComponent from \"../marknotes/MNComponent\";\r\n\r\n// Image and icon imports\r\nimport { TiStar } from \"react-icons/ti\";\r\n\r\n// Styled components\r\nconst Empty = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\n/**\r\n * Home content props\r\n */\r\nexport interface HomeContentProps {\r\n  quicknotes: Quicknote[];\r\n  marknotes: Marknote[];\r\n  handleUpdateMarknote: (\r\n    currentMarknote: Marknote,\r\n    updatedMarknote: Marknote\r\n  ) => void;\r\n  handleDeleteMarknote: (noteId: string) => void;\r\n  handleUpdateQuicknote: (\r\n    currentQuicknote: Quicknote,\r\n    updatedQuicknote: Quicknote\r\n  ) => void;\r\n  handleDeleteQuicknote: (noteId: string) => void;\r\n  setSelectedTab: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\n/**\r\n * Home content renderer\r\n */\r\nconst HomeContent = ({\r\n  quicknotes,\r\n  marknotes,\r\n  handleUpdateMarknote,\r\n  handleDeleteMarknote,\r\n  handleUpdateQuicknote,\r\n  handleDeleteQuicknote,\r\n  setSelectedTab,\r\n}: HomeContentProps) => {\r\n  const favoritedQuicknotes = quicknotes\r\n    .filter((note) => note.favorited)\r\n    .map((note) => (\r\n      <QNComponent\r\n        key={note.id}\r\n        notes={quicknotes}\r\n        currentNote={note}\r\n        handleUpdateQuicknote={handleUpdateQuicknote}\r\n        handleDeleteQuicknote={handleDeleteQuicknote}\r\n      />\r\n    ));\r\n\r\n  const favoritedMarknotes = marknotes\r\n    .filter((note) => note.favorited)\r\n    .map((note) => (\r\n      <MNComponent\r\n        key={note.id}\r\n        currentNote={note}\r\n        handleUpdateMarknote={handleUpdateMarknote}\r\n        handleDeleteMarknote={handleDeleteMarknote}\r\n        setSelectedTab={setSelectedTab}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"sub-header\">\r\n        <h1>Home</h1>\r\n      </section>\r\n      <div className=\"main-content-wrapper\">\r\n        <SectionContainer>\r\n          <SectionHeader>\r\n            <SectionTitle>\r\n              <TiStar />\r\n              Favorited Quicknotes\r\n            </SectionTitle>\r\n          </SectionHeader>\r\n          <div>\r\n            {favoritedQuicknotes.length !== 0 ? (\r\n              <div className=\"quicknotes-list\">{favoritedQuicknotes}</div>\r\n            ) : (\r\n              <Empty className=\"empty\">\r\n                <p>You have no favorited quicknotes.</p>\r\n              </Empty>\r\n            )}\r\n          </div>\r\n        </SectionContainer>\r\n        <SectionContainer>\r\n          <SectionHeader>\r\n            <SectionTitle>\r\n              <TiStar />\r\n              Favorited Marknotes\r\n            </SectionTitle>\r\n          </SectionHeader>\r\n          <div>\r\n            {favoritedMarknotes.length !== 0 ? (\r\n              <div className=\"marknotes-list\">{favoritedMarknotes}</div>\r\n            ) : (\r\n              <Empty className=\"empty\">\r\n                <p>You have no favorited marknotes.</p>\r\n              </Empty>\r\n            )}\r\n          </div>\r\n        </SectionContainer>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default HomeContent;\r\n","/* Marknotes Help Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n\r\n// Component imports\r\nimport ModalMenu from \"../menus/ModalMenu\";\r\n\r\nexport interface QNHelpProps {\r\n  showQNHelp: any;\r\n  setShowQNHelp: any;\r\n}\r\n\r\nconst QNHelp = ({ showQNHelp, setShowQNHelp }: QNHelpProps) => {\r\n  return (\r\n    <ModalMenu\r\n      heading=\"Quicknotes Help\"\r\n      showMenuState={showQNHelp}\r\n      setShowMenuState={setShowQNHelp}\r\n    >\r\n      <p>\r\n        Quicknotes are small and quick notes similar to sticky notes for jotting\r\n        down quick thoughts, notes, or ideas.\r\n      </p>\r\n      <p>To add a new note, click the + button in the page header.</p>\r\n      <p>\r\n        To change the label color of a quicknote, click the edit button at the\r\n        top right of the note.\r\n      </p>\r\n      <p>\r\n        To delete a note, click the delete button at the top right of the note.\r\n        Deletions are permanent.\r\n      </p>\r\n      <p>\r\n        To favorite or unfavorite a note, click the favorite button at the top\r\n        left of the note.\r\n      </p>\r\n      <p>\r\n        All notes are automatically saved when they are edited, created, or\r\n        deleted.\r\n      </p>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default QNHelp;\r\n","/* Searchbar Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n// Image and icon imports\r\nimport { FaSearch } from \"react-icons/fa\";\r\n\r\ninterface SearchbarProps {\r\n  handleSearchNote: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst Searchbar = ({ handleSearchNote }: SearchbarProps) => {\r\n  return (\r\n    <div className=\"searchbar\">\r\n      <FaSearch className=\"search-icon\" size=\"1.3em\" />\r\n      <input\r\n        onChange={(event) => handleSearchNote(event.target.value)}\r\n        placeholder=\"type to search...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","/* Quicknotes Main Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Common imports\r\nimport { Quicknote } from \"../../common/types\";\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport QNComponent from \"./QNComponent\";\r\nimport QNHelp from \"./QNHelp\";\r\nimport Searchbar from \"../Searchbar\";\r\n\r\n// Image and icon imports\r\nimport { RiAddLine } from \"react-icons/ri\";\r\nimport { MdHelpOutline } from \"react-icons/md\";\r\n\r\nexport interface QNContentProps {\r\n  quicknotes: Quicknote[];\r\n  setQuicknotes: React.Dispatch<React.SetStateAction<any[]>>;\r\n  handleUpdateQuicknote: (\r\n    currentQuicknote: Quicknote,\r\n    updatedQuicknote: Quicknote\r\n  ) => void;\r\n  handleDeleteQuicknote: (noteId: string) => void;\r\n}\r\n\r\n/**\r\n * Content for the quicknotes route.\r\n */\r\nconst QNContent = ({\r\n  quicknotes,\r\n  setQuicknotes,\r\n  handleUpdateQuicknote,\r\n  handleDeleteQuicknote,\r\n}: QNContentProps) => {\r\n  // Quicknotes Help Menu state\r\n  const [showQNHelp, setShowQNHelp] = useState(false);\r\n  const openQNHelp = () => {\r\n    setShowQNHelp((prev) => !prev);\r\n  };\r\n\r\n  /**\r\n   * Function to add new empty quicknote after add quicknote button is pressed\r\n   */\r\n  const handleAddQuicknote = () => {\r\n    const newQuicknote = {\r\n      type: \"quicknote\",\r\n      id: nanoid(),\r\n      title: \"\",\r\n      color: COLOR.GREY_DARK,\r\n      body: \"\",\r\n      lastModified: Date.now(),\r\n      favorited: false,\r\n    };\r\n\r\n    setQuicknotes([...quicknotes, newQuicknote]);\r\n  };\r\n\r\n  /**\r\n   * State for quicknotes search text\r\n   */\r\n  const [QNSearchText, setQNSearchText] = useState(\"\");\r\n\r\n  // Filter notes\r\n  const filteredQuicknotes = quicknotes.filter(\r\n    (note: Quicknote) =>\r\n      note.title.toLowerCase().includes(QNSearchText.toLowerCase()) ||\r\n      note.body.toLowerCase().includes(QNSearchText.toLowerCase())\r\n  );\r\n\r\n  let notes_list = (\r\n    <div className=\"quicknotes-list\">\r\n      {filteredQuicknotes.map((note: any) => (\r\n        <QNComponent\r\n          key={note.id}\r\n          notes={quicknotes}\r\n          currentNote={note}\r\n          handleDeleteQuicknote={handleDeleteQuicknote}\r\n          handleUpdateQuicknote={handleUpdateQuicknote}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  const searchEmpty = (\r\n    <div className=\"empty\">\r\n      <p>{`No notes found for the search term \"${QNSearchText}\".`}</p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"sub-header\">\r\n        <div className=\"sub-header-left\">\r\n          <h1>Quicknotes</h1>\r\n        </div>\r\n        <div className=\"sub-header-right\">\r\n          <Searchbar handleSearchNote={setQNSearchText} />\r\n          <div className=\"sub-header-buttons\">\r\n            <ul>\r\n              <li title=\"New Note\">\r\n                <button onClick={handleAddQuicknote}>\r\n                  <RiAddLine />\r\n                </button>\r\n              </li>\r\n              <li title=\"Help\">\r\n                <button onClick={openQNHelp}>\r\n                  <MdHelpOutline />\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div className=\"main-content-wrapper\">\r\n        {quicknotes.length !== 0 ? (\r\n          notes_list\r\n        ) : (\r\n          <div className=\"empty\">\r\n            <p>You have no saved quicknotes.</p>\r\n            <p>Create one now by pressing the + button in the menu above!</p>\r\n          </div>\r\n        )}\r\n        {quicknotes.length !== 0 &&\r\n          filteredQuicknotes.length === 0 &&\r\n          searchEmpty}\r\n        <QNHelp showQNHelp={showQNHelp} setShowQNHelp={setShowQNHelp} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default QNContent;\r\n","/* Marknotes Help Menu Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\n\r\n// Component imports\r\nimport ModalMenu from \"../menus/ModalMenu\";\r\n\r\nexport interface MNHelpProps {\r\n  showMNHelp: boolean;\r\n  setShowMNHelp: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst MNHelp = ({ showMNHelp, setShowMNHelp }: MNHelpProps) => {\r\n  return (\r\n    <ModalMenu\r\n      heading=\"Marknotes Help\"\r\n      showMenuState={showMNHelp}\r\n      setShowMenuState={setShowMNHelp}\r\n    >\r\n      <p>\r\n        Marknotes are editable documents where you can use markdown syntax in\r\n        your notes to add styling.\r\n      </p>\r\n      <p>To add a new note, click the + button in the menu.</p>\r\n      <p>\r\n        To change the label color of a quicknote, click the edit button at the\r\n        top right of the note, or at the top right of the editor.\r\n      </p>\r\n      <p>\r\n        To delete a note, click the delete button at the top right of the note,\r\n        or at the top right of the editor. Deletions are permanent.\r\n      </p>\r\n      <p>\r\n        To favorite or unfavorite a note, click the favorite button at the top\r\n        left of the note, or at the top right of the editor.\r\n      </p>\r\n      <p>\r\n        To open the editor to edit and preview your marknotes, click the\r\n        marknote in the menu.\r\n      </p>\r\n      <p>\r\n        All notes are automatically saved when they are edited, created, or\r\n        deleted.\r\n      </p>\r\n    </ModalMenu>\r\n  );\r\n};\r\n\r\nexport default MNHelp;\r\n","/* Marknote Editor Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { css } from \"@emotion/react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Common imports\r\nimport { Marknote } from \"../../common/types\";\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport ColorMenu from \"../menus/ColorMenu\";\r\nimport ConfirmDelete from \"../menus/ConfirmDeleteMenu\";\r\n\r\n// Image and icon imports\r\nimport { IoReturnUpForward } from \"react-icons/io5\";\r\nimport { TiStarOutline, TiStar } from \"react-icons/ti\";\r\nimport { RiEdit2Line } from \"react-icons/ri\";\r\nimport { MdDeleteForever } from \"react-icons/md\";\r\nimport { VscOpenPreview } from \"react-icons/vsc\";\r\nimport { AiOutlineCode } from \"react-icons/ai\";\r\n\r\n// Codemirror imports\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/markdown/markdown\"; // import codemirror markdown\r\n\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2\"; // import text editor\r\n\r\n/**\r\n * Dynamic Element Styles\r\n * Should declare outside of function component, but need to declare here for dynamic styles\r\n * Issue: input is rerendered each time input is given, losing focus\r\n * Logic from this thread: https://github.com/emotion-js/emotion/issues/1797\r\n */\r\nconst SubheaderStyles = ({ color }: { color: string }) =>\r\n  css`\r\n    background: ${color};\r\n  `;\r\nconst Subheader = styled.section`\r\n  ${SubheaderStyles}\r\n`;\r\n\r\nconst TitleInputStyles = ({ color }: { color: string }) =>\r\n  css`\r\n    background: ${color};\r\n  `;\r\nconst TitleInput = styled.input`\r\n  ${TitleInputStyles}\r\n`;\r\n\r\nconst SubheaderButtonStyles = ({\r\n  color,\r\n  color2,\r\n}: {\r\n  color: string;\r\n  color2: string;\r\n}) =>\r\n  css`\r\n    background: ${color} !important;\r\n    &:hover {\r\n      background: ${color2} !important;\r\n    }\r\n  `;\r\nconst SubheaderButton = styled.button`\r\n  ${SubheaderButtonStyles}\r\n`;\r\n\r\n/**\r\n * Editor component proptypes\r\n */\r\nexport interface MNEditorProps {\r\n  currentNote: Marknote;\r\n  handleDeleteMarknote: (noteId: string) => void;\r\n  handleUpdateMarknote: (\r\n    currentMarknote: Marknote,\r\n    updatedMarknote: Marknote\r\n  ) => void;\r\n  setRedirect: React.Dispatch<React.SetStateAction<JSX.Element>>;\r\n}\r\n\r\nconst MNEditor = ({\r\n  currentNote,\r\n  handleDeleteMarknote,\r\n  handleUpdateMarknote,\r\n  setRedirect,\r\n}: MNEditorProps) => {\r\n  // Logic to determine colors\r\n  /**\r\n   * TODO: Change subheader text colors for Lemon and Lime\r\n   */\r\n  let color = currentNote.color;\r\n  let color_light;\r\n  switch (color) {\r\n    case COLOR.RED:\r\n      color_light = COLOR.RED_LIGHT;\r\n      break;\r\n    case COLOR.ORANGE:\r\n      color_light = COLOR.ORANGE_LIGHT;\r\n      break;\r\n    case COLOR.YELLOW:\r\n      color_light = COLOR.YELLOW_LIGHT;\r\n      break;\r\n    case COLOR.GREEN:\r\n      color_light = COLOR.GREEN_LIGHT;\r\n      break;\r\n    case COLOR.BLUE:\r\n      color_light = COLOR.BLUE_LIGHT;\r\n      break;\r\n    case COLOR.PURPLE:\r\n      color_light = COLOR.PURPLE_LIGHT;\r\n      break;\r\n    case COLOR.PINK:\r\n      color_light = COLOR.PINK_LIGHT;\r\n      break;\r\n    case COLOR.CYAN:\r\n      color_light = COLOR.CYAN_LIGHT;\r\n      break;\r\n    case COLOR.LEMON:\r\n      color_light = COLOR.LEMON_LIGHT;\r\n      break;\r\n    case COLOR.LIME:\r\n      color_light = COLOR.LIME_LIGHT;\r\n      break;\r\n    case COLOR.GREY:\r\n      color_light = COLOR.GREY_LIGHT;\r\n      break;\r\n    case COLOR.GREY_DARK:\r\n      color_light = COLOR.GREY_DARK_LIGHT;\r\n      break;\r\n    default:\r\n      color_light = COLOR.GREY_LIGHT;\r\n      break;\r\n  }\r\n\r\n  // Menu state\r\n  const [showColorMenu, setShowColorMenu] = useState(false);\r\n\r\n  /**\r\n   * Function to handle a change in the note's color.\r\n   * Does NOT change the last modified date.\r\n   */\r\n  const handleEditColor = (color: string) => {\r\n    if (handleUpdateMarknote) {\r\n      handleUpdateMarknote(currentNote, {\r\n        ...currentNote,\r\n        color: color,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to toggle the color menu\r\n   */\r\n  const toggleColorMenu = (\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    // Prevent parent link from redirecting\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n\r\n    // Toggle display of component\r\n    setShowColorMenu((prev) => !prev);\r\n  };\r\n\r\n  // Quicknote Delete Menu state\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n\r\n  /**\r\n   * Function to toggle the confirm delete menu\r\n   */\r\n  const toggleConfirmDelete = () => {\r\n    setShowConfirmDelete((prev) => !prev);\r\n  };\r\n\r\n  // Reset redirect when editor mounts\r\n  useEffect(() => {\r\n    setRedirect(<></>);\r\n  }, [setRedirect]);\r\n\r\n  /**\r\n   * Function to handle changes in a note's field\r\n   * @param key The field being changed\r\n   * @param value The new value of the field\r\n   */\r\n  const handleEditField = (key: string, value: string | Boolean) => {\r\n    handleUpdateMarknote(currentNote, {\r\n      ...currentNote,\r\n      [key]: value,\r\n      lastModified: Date.now(),\r\n    });\r\n  };\r\n\r\n  const handleChangeEditorBody = (\r\n    editor: string,\r\n    data: string,\r\n    value: string\r\n  ) => {\r\n    handleEditField(\"body\", value);\r\n  };\r\n\r\n  // States for Editor and Preview\r\n  const [showEditor, setShowEditor] = useState(true);\r\n  const [showPreview, setShowPreview] = useState(true);\r\n\r\n  return (\r\n    <div className=\"editor-main\">\r\n      <Subheader className=\"sub-header\" color={color}>\r\n        <TitleInput\r\n          type=\"text\"\r\n          className=\"editor-title\"\r\n          placeholder=\"Enter a title...\"\r\n          value={currentNote.title}\r\n          onChange={(event) => handleEditField(\"title\", event.target.value)}\r\n          color={color_light}\r\n        />\r\n        <div className=\"sub-header-buttons\">\r\n          <ul>\r\n            <li>\r\n              <SubheaderButton\r\n                title=\"Toggle Preview\"\r\n                color={showEditor ? color_light : color}\r\n                color2={color_light}\r\n                onClick={() => setShowEditor((prev) => !prev)}\r\n              >\r\n                <AiOutlineCode />\r\n              </SubheaderButton>\r\n            </li>\r\n            <li>\r\n              <SubheaderButton\r\n                title=\"Toggle Preview\"\r\n                color={showPreview ? color_light : color}\r\n                color2={color_light}\r\n                onClick={() => setShowPreview((prev) => !prev)}\r\n              >\r\n                <VscOpenPreview />\r\n              </SubheaderButton>\r\n            </li>\r\n            <li>\r\n              <SubheaderButton\r\n                title=\"Options\"\r\n                color={color}\r\n                color2={color_light}\r\n                onClick={toggleColorMenu}\r\n              >\r\n                <RiEdit2Line />\r\n              </SubheaderButton>\r\n            </li>\r\n            <li>\r\n              <SubheaderButton\r\n                title=\"Delete Note\"\r\n                color={color}\r\n                color2={color_light}\r\n                onClick={toggleConfirmDelete}\r\n              >\r\n                <MdDeleteForever />\r\n              </SubheaderButton>\r\n            </li>\r\n            <li>\r\n              <SubheaderButton\r\n                title=\"Favorite\"\r\n                color={color}\r\n                color2={color_light}\r\n                onClick={() =>\r\n                  handleEditField(\r\n                    \"favorited\",\r\n                    currentNote.favorited === true ? false : true\r\n                  )\r\n                }\r\n              >\r\n                {currentNote.favorited === false ? (\r\n                  <TiStarOutline />\r\n                ) : (\r\n                  <TiStar />\r\n                )}\r\n              </SubheaderButton>\r\n            </li>\r\n            <li>\r\n              <SubheaderButton\r\n                title=\"Return to Notes\"\r\n                color={color}\r\n                color2={color_light}\r\n              >\r\n                <Link to=\"/marknotes\">\r\n                  <IoReturnUpForward />\r\n                </Link>\r\n              </SubheaderButton>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </Subheader>\r\n      {!showEditor && !showPreview ? (\r\n        <div className=\"main-content-wrapper\">\r\n          <div className=\"empty\">\r\n            <p>\r\n              To open the editor, click the <AiOutlineCode /> button.\r\n            </p>\r\n            <p>\r\n              To open the preview, click the <VscOpenPreview /> button.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      <div className=\"editor-content\">\r\n        <section className={`editor-container ${showEditor ? \"\" : \"hide\"}`}>\r\n          <ControlledEditor\r\n            className=\"editor-body\"\r\n            value={currentNote.body}\r\n            onBeforeChange={handleChangeEditorBody}\r\n            options={{\r\n              lineWrapping: true,\r\n              mode: \"markdown\",\r\n              lineNumbers: true,\r\n            }}\r\n          />\r\n        </section>\r\n        {showEditor && showPreview && <section className=\"editor-divider\" />}\r\n        <section className={`preview-container ${showPreview ? \"\" : \"hide\"}`}>\r\n          <ReactMarkdown className=\"preview-body\">\r\n            {currentNote.body}\r\n          </ReactMarkdown>\r\n        </section>\r\n      </div>\r\n      <ColorMenu\r\n        showColorMenu={showColorMenu}\r\n        setShowColorMenu={setShowColorMenu}\r\n        handleEditColor={handleEditColor}\r\n      />\r\n      <ConfirmDelete\r\n        currentNote={currentNote}\r\n        showMenuState={showConfirmDelete}\r\n        setShowMenuState={setShowConfirmDelete}\r\n        handleDeleteNote={handleDeleteMarknote}\r\n        toggleConfirmDelete={toggleConfirmDelete}\r\n        redirect={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MNEditor;\r\n","/* Marknote Preview Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { css } from \"@emotion/react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Common imports\r\nimport { Marknote } from \"../../common/types\";\r\n\r\nconst Page = styled.section`\r\n  width: 8in;\r\n  height: 8in;\r\n`;\r\n\r\n/**\r\n * Preview component proptypes\r\n */\r\nexport interface MNPreviewProps {\r\n  currentNote: Marknote;\r\n}\r\n\r\nconst MNPreview = ({ currentNote }: MNPreviewProps) => {\r\n  return <div></div>;\r\n};\r\n\r\nexport default MNPreview;\r\n","/* Marknotes Main Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Common imports\r\nimport { Marknote } from \"../../common/types\";\r\nimport { SectionContainer, SectionHeader, SectionTitle } from \"../../common/styled\";\r\nimport { COLOR } from \"../../common/color\";\r\n\r\n// Component imports\r\nimport MNComponent from \"./MNComponent\";\r\nimport MNHelp from \"./MNHelp\";\r\nimport MNEditor from \"./MNEditor\";\r\nimport Preview from \"./MNPreview\";\r\nimport Searchbar from \"../Searchbar\";\r\n\r\n// Image and icon impaorts\r\nimport { RiAddLine } from \"react-icons/ri\";\r\nimport { MdHelpOutline } from \"react-icons/md\";\r\n\r\n/**\r\n * Props for MNContent\r\n */\r\nexport interface MNContentProps {\r\n  marknotes: Marknote[];\r\n  setMarknotes: React.Dispatch<React.SetStateAction<any[]>>;\r\n  handleUpdateMarknote: (\r\n    currentMarknote: Marknote,\r\n    updatedMarknote: Marknote\r\n  ) => void;\r\n  handleDeleteMarknote: (noteId: string) => void;\r\n  setSelectedTab: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\n/**\r\n * Content for marknotes route\r\n */\r\nconst MNContent = ({\r\n  marknotes,\r\n  setMarknotes,\r\n  handleUpdateMarknote,\r\n  handleDeleteMarknote,\r\n  setSelectedTab,\r\n}: MNContentProps) => {\r\n  // Redirect state\r\n  const [redirect, setRedirect] = useState(<></>);\r\n\r\n  /**\r\n   * Marknote function to add a new empty marknote to the list\r\n   */\r\n  const handleAddMarknote = () => {\r\n    // Add new to state list\r\n    const newMarknote = {\r\n      type: \"marknote\",\r\n      id: nanoid(),\r\n      title: \"\",\r\n      body: \"\",\r\n      lastModified: Date.now(),\r\n      color: COLOR.GREY_DARK,\r\n      favorited: false,\r\n    };\r\n\r\n    setMarknotes([...marknotes, newMarknote]);\r\n\r\n    // Redirect when new note is added\r\n    setRedirect(<Redirect to={`/marknotes/${newMarknote.id}`} />);\r\n  };\r\n\r\n  // Help menu state\r\n  const [showMNHelp, setShowMNHelp] = useState(false);\r\n  const openMNHelp = () => {\r\n    setShowMNHelp((prev) => !prev);\r\n  };\r\n\r\n  /**\r\n   * State for marknotes search text\r\n   */\r\n  const [MNSearchText, setMNSearchText] = useState(\"\");\r\n\r\n  // Sort notes in descending order from last modifed date\r\n  const sortedMarknotes = marknotes.sort(\r\n    (a: Marknote, b: Marknote) => b.lastModified - a.lastModified\r\n  );\r\n\r\n  // Filter notes\r\n  const filteredMarknotes = sortedMarknotes.filter(\r\n    (note: Marknote) =>\r\n      note.title.toLowerCase().includes(MNSearchText.toLowerCase()) ||\r\n      note.body.toLowerCase().includes(MNSearchText.toLowerCase())\r\n  );\r\n\r\n  let notes_list = (\r\n    <div className=\"marknotes-list\">\r\n      {filteredMarknotes.map((note) => (\r\n        <MNComponent\r\n          key={note.id}\r\n          currentNote={note}\r\n          handleUpdateMarknote={handleUpdateMarknote}\r\n          handleDeleteMarknote={handleDeleteMarknote}\r\n          setSelectedTab={setSelectedTab}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  const searchEmpty = (\r\n    <div className=\"empty\">\r\n      <p>{`No notes found for the search term \"${MNSearchText}\".`}</p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/marknotes\">\r\n        <section className=\"sub-header\">\r\n          <div className=\"sub-header-left\">\r\n            <h1>Marknotes</h1>\r\n          </div>\r\n          <div className=\"sub-header-right\">\r\n            <Searchbar handleSearchNote={setMNSearchText} />\r\n            <div className=\"sub-header-buttons\">\r\n              <ul>\r\n                <li title=\"New Note\">\r\n                  <button onClick={handleAddMarknote}>\r\n                    <RiAddLine />\r\n                  </button>\r\n                </li>\r\n                <li title=\"Help\">\r\n                  <button onClick={openMNHelp}>\r\n                    <MdHelpOutline />\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <div className=\"main-content-wrapper\">\r\n        <SectionHeader>\r\n            <SectionTitle>\r\n              My Marknotes\r\n            </SectionTitle>\r\n          </SectionHeader>\r\n          {marknotes.length !== 0 ? (\r\n            notes_list\r\n          ) : (\r\n            <div className=\"empty\">\r\n              <p>You have no saved marknotes.</p>\r\n              <p>Create one now by pressing the + button in the menu above!</p>\r\n            </div>\r\n          )}\r\n          {marknotes.length !== 0 &&\r\n            filteredMarknotes.length === 0 &&\r\n            searchEmpty}\r\n          {redirect}\r\n        </div>\r\n        <MNHelp showMNHelp={showMNHelp} setShowMNHelp={setShowMNHelp} />\r\n      </Route>\r\n      {/** Routes for Editors */}\r\n      {marknotes.map((note) => (\r\n        <Route key={note.id} path={`/marknotes/${note.id}`}>\r\n          <MNEditor\r\n            currentNote={note}\r\n            handleDeleteMarknote={handleDeleteMarknote}\r\n            handleUpdateMarknote={handleUpdateMarknote}\r\n            setRedirect={setRedirect}\r\n          />\r\n        </Route>\r\n      ))}\r\n      {/** Routes for Previews */}\r\n      {marknotes.map((note) => (\r\n        <Route key={note.id} path={`/marknotes/${note.id}`}>\r\n          <Preview currentNote={note} />\r\n        </Route>\r\n      ))}\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default MNContent;\r\n","/* Settings Content Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React from \"react\";\r\nexport interface SettingsContentProps {}\r\n\r\nconst SettingsContent = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"sub-header\">\r\n        <h1>Settings</h1>\r\n      </section>\r\n      <div className=\"main-content-wrapper\">\r\n        <div className=\"empty\">\r\n          <p>Settings are currently unavailable.</p>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SettingsContent;\r\n","/* Main App Component\r\n------------------------------------------------------------------------------*/\r\n// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, useLocation } from \"react-router-dom\";\r\n\r\n// Common imports\r\nimport { Quicknote, Marknote } from \"../common/types\";\r\n\r\n// Component imports\r\nimport Header from \"./Header\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Footer from \"./Footer\";\r\n\r\nimport HomeContent from \"./home/HomeContent\";\r\nimport QNContent from \"./quicknotes/QNContent\";\r\nimport MNContent from \"./marknotes/MNContent\";\r\nimport SettingsContent from \"./settings/SettingsContent\";\r\n\r\n// CSS imports\r\nimport \"../css/app.css\";\r\nimport \"../css/quicknotes.css\";\r\nimport \"../css/marknotes.css\";\r\n\r\n/**\r\n * Main application component\r\n */\r\nconst App = () => {\r\n  /* Quicknotes State\r\n  ------------------------------------------------------------------------------*/\r\n  const [quicknotes, setQuicknotes] = useState<Quicknote[]>([]);\r\n  const quicknotesLocal = \"denote_quicknotes\";\r\n\r\n  /**\r\n   * Effect hook to retrieve quicknotes from local storage\r\n   */\r\n  useEffect(() => {\r\n    const savedQuicknotes = JSON.parse(\r\n      localStorage.getItem(quicknotesLocal) || \"{}\"\r\n    );\r\n    // Check if notes were received\r\n    if (savedQuicknotes) {\r\n      setQuicknotes(savedQuicknotes);\r\n    }\r\n  }, []); // Run on load\r\n\r\n  /**\r\n   * Effect hook to save quicknotes to local storage when change is made\r\n   */\r\n  useEffect(() => {\r\n    localStorage.setItem(quicknotesLocal, JSON.stringify(quicknotes));\r\n  }, [quicknotes]); // Run on change in notes\r\n\r\n  /**\r\n   * Function to update a quicknote in the list with updated information\r\n   * @param currentQuicknote The quicknote being updated\r\n   * @param updatedQuicknote The new information in update with\r\n   */\r\n  const handleUpdateQuicknote = (\r\n    currentQuicknote: Quicknote,\r\n    updatedQuicknote: Quicknote\r\n  ) => {\r\n    const updatedQuicknotesArray = quicknotes.map((note: any) => {\r\n      if (note.id === currentQuicknote.id) {\r\n        return updatedQuicknote;\r\n      }\r\n      return note;\r\n    });\r\n    setQuicknotes(updatedQuicknotesArray);\r\n  };\r\n\r\n  /**\r\n   * Function to delete a quicknote from the list\r\n   * @param id The id of the quicknote to be deleted\r\n   */\r\n  const handleDeleteQuicknote = (id: string) => {\r\n    const newQuicknotes = quicknotes.filter(\r\n      (note: Quicknote) => note.id !== id\r\n    ); // don't need to make new array since filter returns new array\r\n    setQuicknotes(newQuicknotes);\r\n  };\r\n\r\n  /* Marknote State\r\n  ------------------------------------------------------------------------------*/\r\n  const [marknotes, setMarknotes] = useState<Marknote[]>([]);\r\n  const marknotesLocal = \"denote_marknotes\";\r\n\r\n  /**\r\n   * Effect hook to retrieve marknotes from local storage\r\n   */\r\n  useEffect(() => {\r\n    const savedMarknotes = JSON.parse(\r\n      localStorage.getItem(marknotesLocal) || \"{}\"\r\n    );\r\n    // Check if notes were received\r\n    if (savedMarknotes) {\r\n      setMarknotes(savedMarknotes);\r\n    }\r\n  }, []); // Run on load\r\n\r\n  /**\r\n   * Effect hook to save marknotes to local storage when change is made\r\n   */\r\n  useEffect(() => {\r\n    localStorage.setItem(marknotesLocal, JSON.stringify(marknotes));\r\n  }, [marknotes]);\r\n\r\n  /**\r\n   * Marknote function to update a marknote in the list\r\n   * @param currentMarknote The marknote being updated\r\n   * @param updatedMarknote The data to update the marknote with\r\n   */\r\n  const handleUpdateMarknote = (\r\n    currentMarknote: Marknote,\r\n    updatedMarknote: Marknote\r\n  ) => {\r\n    const updatedMarknotesArray = marknotes.map((note: Marknote) => {\r\n      if (note.id === currentMarknote.id) {\r\n        return updatedMarknote;\r\n      }\r\n      return note;\r\n    });\r\n    setMarknotes(updatedMarknotesArray);\r\n  };\r\n\r\n  /**\r\n   * Marknote function to delete a marknote from the list\r\n   * @param noteId The id of the marknote to be deleted\r\n   */\r\n  const handleDeleteMarknote = (noteId: string) => {\r\n    // Use filter to check if id is the one we're deleting\r\n    // If n ot, keep; Otherwise, remove\r\n    setMarknotes(marknotes.filter((note: Marknote) => note.id !== noteId));\r\n  };\r\n\r\n  /* Selected tab State\r\n  ------------------------------------------------------------------------------*/\r\n  const [selectedTab, setSelectedTab] = useState(useLocation().pathname);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"app-container\">\r\n        <Sidebar selectedTab={selectedTab} setSelectedTab={setSelectedTab} />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <main>\r\n              <HomeContent\r\n                quicknotes={quicknotes}\r\n                marknotes={marknotes}\r\n                handleUpdateMarknote={handleUpdateMarknote}\r\n                handleDeleteMarknote={handleDeleteMarknote}\r\n                handleUpdateQuicknote={handleUpdateQuicknote}\r\n                handleDeleteQuicknote={handleDeleteQuicknote}\r\n                setSelectedTab={setSelectedTab}\r\n              />\r\n            </main>\r\n          </Route>\r\n          <Route path=\"/quicknotes\">\r\n            <main>\r\n              <QNContent\r\n                quicknotes={quicknotes}\r\n                setQuicknotes={setQuicknotes}\r\n                handleUpdateQuicknote={handleUpdateQuicknote}\r\n                handleDeleteQuicknote={handleDeleteQuicknote}\r\n              />\r\n            </main>\r\n          </Route>\r\n          <Route path=\"/marknotes\">\r\n            <main>\r\n              <MNContent\r\n                marknotes={marknotes}\r\n                setMarknotes={setMarknotes}\r\n                handleUpdateMarknote={handleUpdateMarknote}\r\n                handleDeleteMarknote={handleDeleteMarknote}\r\n                setSelectedTab={setSelectedTab}\r\n              />\r\n            </main>\r\n          </Route>\r\n          <Route path=\"/settings\">\r\n            <main>\r\n              <SettingsContent />\r\n            </main>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// React imports\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\n// Component imports\r\nimport App from \"./components/App\";\r\n\r\n// CSS imports\r\nimport \"./css/index.css\";\r\nimport \"./css/app.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}